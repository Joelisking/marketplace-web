/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetNotifications200,
  GetNotifications400,
  GetNotificationsUnreadCount200,
  GetNotificationsUnreadCount400,
  PatchNotificationsNotificationIdRead200,
  PatchNotificationsNotificationIdRead400,
  PatchNotificationsReadAll200,
  PatchNotificationsReadAll400
} from '../marketplaceAPI.schemas';





export const getNotifications = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetNotifications200>> => {
    
    
    return axios.get(
      `http://localhost:4000/notifications`,options
    );
  }


export const getGetNotificationsQueryKey = () => {
    return [`http://localhost:4000/notifications`] as const;
    }

    
export const getGetNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<GetNotifications400 | void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotifications>>> = ({ signal }) => getNotifications({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotifications>>>
export type GetNotificationsQueryError = AxiosError<GetNotifications400 | void>


export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<GetNotifications400 | void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotifications>>,
          TError,
          Awaited<ReturnType<typeof getNotifications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<GetNotifications400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotifications>>,
          TError,
          Awaited<ReturnType<typeof getNotifications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<GetNotifications400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetNotifications<TData = Awaited<ReturnType<typeof getNotifications>>, TError = AxiosError<GetNotifications400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotifications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const patchNotificationsNotificationIdRead = (
    notificationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchNotificationsNotificationIdRead200>> => {
    
    
    return axios.patch(
      `http://localhost:4000/notifications/${notificationId}/read`,undefined,options
    );
  }



export const getPatchNotificationsNotificationIdReadMutationOptions = <TError = AxiosError<PatchNotificationsNotificationIdRead400 | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchNotificationsNotificationIdRead>>, TError,{notificationId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchNotificationsNotificationIdRead>>, TError,{notificationId: string}, TContext> => {

const mutationKey = ['patchNotificationsNotificationIdRead'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchNotificationsNotificationIdRead>>, {notificationId: string}> = (props) => {
          const {notificationId} = props ?? {};

          return  patchNotificationsNotificationIdRead(notificationId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchNotificationsNotificationIdReadMutationResult = NonNullable<Awaited<ReturnType<typeof patchNotificationsNotificationIdRead>>>
    
    export type PatchNotificationsNotificationIdReadMutationError = AxiosError<PatchNotificationsNotificationIdRead400 | void>

    export const usePatchNotificationsNotificationIdRead = <TError = AxiosError<PatchNotificationsNotificationIdRead400 | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchNotificationsNotificationIdRead>>, TError,{notificationId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchNotificationsNotificationIdRead>>,
        TError,
        {notificationId: string},
        TContext
      > => {

      const mutationOptions = getPatchNotificationsNotificationIdReadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const patchNotificationsReadAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchNotificationsReadAll200>> => {
    
    
    return axios.patch(
      `http://localhost:4000/notifications/read-all`,undefined,options
    );
  }



export const getPatchNotificationsReadAllMutationOptions = <TError = AxiosError<PatchNotificationsReadAll400 | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchNotificationsReadAll>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchNotificationsReadAll>>, TError,void, TContext> => {

const mutationKey = ['patchNotificationsReadAll'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchNotificationsReadAll>>, void> = () => {
          

          return  patchNotificationsReadAll(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchNotificationsReadAllMutationResult = NonNullable<Awaited<ReturnType<typeof patchNotificationsReadAll>>>
    
    export type PatchNotificationsReadAllMutationError = AxiosError<PatchNotificationsReadAll400 | void>

    export const usePatchNotificationsReadAll = <TError = AxiosError<PatchNotificationsReadAll400 | void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchNotificationsReadAll>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchNotificationsReadAll>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPatchNotificationsReadAllMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getNotificationsUnreadCount = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetNotificationsUnreadCount200>> => {
    
    
    return axios.get(
      `http://localhost:4000/notifications/unread-count`,options
    );
  }


export const getGetNotificationsUnreadCountQueryKey = () => {
    return [`http://localhost:4000/notifications/unread-count`] as const;
    }

    
export const getGetNotificationsUnreadCountQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError = AxiosError<GetNotificationsUnreadCount400 | void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationsUnreadCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationsUnreadCount>>> = ({ signal }) => getNotificationsUnreadCount({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationsUnreadCountQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationsUnreadCount>>>
export type GetNotificationsUnreadCountQueryError = AxiosError<GetNotificationsUnreadCount400 | void>


export function useGetNotificationsUnreadCount<TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError = AxiosError<GetNotificationsUnreadCount400 | void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
          TError,
          Awaited<ReturnType<typeof getNotificationsUnreadCount>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationsUnreadCount<TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError = AxiosError<GetNotificationsUnreadCount400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationsUnreadCount>>,
          TError,
          Awaited<ReturnType<typeof getNotificationsUnreadCount>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationsUnreadCount<TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError = AxiosError<GetNotificationsUnreadCount400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetNotificationsUnreadCount<TData = Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError = AxiosError<GetNotificationsUnreadCount400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsUnreadCount>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationsUnreadCountQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



