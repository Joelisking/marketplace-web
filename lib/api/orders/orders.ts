/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteOrdersOrderId200,
  DeleteOrdersOrderIdBody,
  GetOrders200,
  GetOrdersOrderId200,
  GetOrdersParams,
  PostOrders200,
  PostOrdersBody
} from '../marketplaceAPI.schemas';





export const postOrders = (
    postOrdersBody: PostOrdersBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostOrders200>> => {
    
    
    return axios.post(
      `/orders`,
      postOrdersBody,options
    );
  }



export const getPostOrdersMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: PostOrdersBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: PostOrdersBody}, TContext> => {

const mutationKey = ['postOrders'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrders>>, {data: PostOrdersBody}> = (props) => {
          const {data} = props ?? {};

          return  postOrders(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrdersMutationResult = NonNullable<Awaited<ReturnType<typeof postOrders>>>
    export type PostOrdersMutationBody = PostOrdersBody
    export type PostOrdersMutationError = AxiosError<unknown>

    export const usePostOrders = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: PostOrdersBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postOrders>>,
        TError,
        {data: PostOrdersBody},
        TContext
      > => {

      const mutationOptions = getPostOrdersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getOrders = (
    params?: GetOrdersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetOrders200>> => {
    
    
    return axios.get(
      `/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetOrdersQueryKey = (params?: GetOrdersParams,) => {
    return [`/orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getOrders>>, TError = AxiosError<unknown>>(params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrders>>> = ({ signal }) => getOrders(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrders>>>
export type GetOrdersQueryError = AxiosError<unknown>


export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = AxiosError<unknown>>(
 params: undefined |  GetOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrders>>,
          TError,
          Awaited<ReturnType<typeof getOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = AxiosError<unknown>>(
 params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrders>>,
          TError,
          Awaited<ReturnType<typeof getOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = AxiosError<unknown>>(
 params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = AxiosError<unknown>>(
 params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOrdersOrderId = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetOrdersOrderId200>> => {
    
    
    return axios.get(
      `/orders/${orderId}`,options
    );
  }


export const getGetOrdersOrderIdQueryKey = (orderId: string,) => {
    return [`/orders/${orderId}`] as const;
    }

    
export const getGetOrdersOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrdersOrderId>>, TError = AxiosError<unknown>>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrdersOrderId>>> = ({ signal }) => getOrdersOrderId(orderId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrdersOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrdersOrderId>>>
export type GetOrdersOrderIdQueryError = AxiosError<unknown>


export function useGetOrdersOrderId<TData = Awaited<ReturnType<typeof getOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersOrderId>>,
          TError,
          Awaited<ReturnType<typeof getOrdersOrderId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersOrderId<TData = Awaited<ReturnType<typeof getOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersOrderId>>,
          TError,
          Awaited<ReturnType<typeof getOrdersOrderId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersOrderId<TData = Awaited<ReturnType<typeof getOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOrdersOrderId<TData = Awaited<ReturnType<typeof getOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrdersOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteOrdersOrderId = (
    orderId: string,
    deleteOrdersOrderIdBody: DeleteOrdersOrderIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteOrdersOrderId200>> => {
    
    
    return axios.delete(
      `/orders/${orderId}`,{data:
      deleteOrdersOrderIdBody, ...options}
    );
  }



export const getDeleteOrdersOrderIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrdersOrderId>>, TError,{orderId: string;data: DeleteOrdersOrderIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrdersOrderId>>, TError,{orderId: string;data: DeleteOrdersOrderIdBody}, TContext> => {

const mutationKey = ['deleteOrdersOrderId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrdersOrderId>>, {orderId: string;data: DeleteOrdersOrderIdBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  deleteOrdersOrderId(orderId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrdersOrderIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrdersOrderId>>>
    export type DeleteOrdersOrderIdMutationBody = DeleteOrdersOrderIdBody
    export type DeleteOrdersOrderIdMutationError = AxiosError<unknown>

    export const useDeleteOrdersOrderId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrdersOrderId>>, TError,{orderId: string;data: DeleteOrdersOrderIdBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrdersOrderId>>,
        TError,
        {orderId: string;data: DeleteOrdersOrderIdBody},
        TContext
      > => {

      const mutationOptions = getDeleteOrdersOrderIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    