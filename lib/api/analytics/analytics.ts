/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetAnalyticsBestSellers200,
  GetAnalyticsFeatured200,
  GetAnalyticsStoresSlugBestSellers200,
  GetAnalyticsStoresSlugBestSellers404
} from '../marketplaceAPI.schemas';





export const getAnalyticsBestSellers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAnalyticsBestSellers200>> => {
    
    
    return axios.get(
      `/analytics/best-sellers`,options
    );
  }


export const getGetAnalyticsBestSellersQueryKey = () => {
    return [`/analytics/best-sellers`] as const;
    }

    
export const getGetAnalyticsBestSellersQueryOptions = <TData = Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnalyticsBestSellersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnalyticsBestSellers>>> = ({ signal }) => getAnalyticsBestSellers({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnalyticsBestSellersQueryResult = NonNullable<Awaited<ReturnType<typeof getAnalyticsBestSellers>>>
export type GetAnalyticsBestSellersQueryError = AxiosError<unknown>


export function useGetAnalyticsBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsBestSellers>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsBestSellers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsBestSellers>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsBestSellers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAnalyticsBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnalyticsBestSellersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAnalyticsStoresSlugBestSellers = (
    slug: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAnalyticsStoresSlugBestSellers200>> => {
    
    
    return axios.get(
      `/analytics/stores/${slug}/best-sellers`,options
    );
  }


export const getGetAnalyticsStoresSlugBestSellersQueryKey = (slug: string,) => {
    return [`/analytics/stores/${slug}/best-sellers`] as const;
    }

    
export const getGetAnalyticsStoresSlugBestSellersQueryOptions = <TData = Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError = AxiosError<GetAnalyticsStoresSlugBestSellers404>>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnalyticsStoresSlugBestSellersQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>> = ({ signal }) => getAnalyticsStoresSlugBestSellers(slug, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(slug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnalyticsStoresSlugBestSellersQueryResult = NonNullable<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>>
export type GetAnalyticsStoresSlugBestSellersQueryError = AxiosError<GetAnalyticsStoresSlugBestSellers404>


export function useGetAnalyticsStoresSlugBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError = AxiosError<GetAnalyticsStoresSlugBestSellers404>>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsStoresSlugBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError = AxiosError<GetAnalyticsStoresSlugBestSellers404>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsStoresSlugBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError = AxiosError<GetAnalyticsStoresSlugBestSellers404>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAnalyticsStoresSlugBestSellers<TData = Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError = AxiosError<GetAnalyticsStoresSlugBestSellers404>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsStoresSlugBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnalyticsStoresSlugBestSellersQueryOptions(slug,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAnalyticsFeatured = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAnalyticsFeatured200>> => {
    
    
    return axios.get(
      `/analytics/featured`,options
    );
  }


export const getGetAnalyticsFeaturedQueryKey = () => {
    return [`/analytics/featured`] as const;
    }

    
export const getGetAnalyticsFeaturedQueryOptions = <TData = Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAnalyticsFeaturedQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnalyticsFeatured>>> = ({ signal }) => getAnalyticsFeatured({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAnalyticsFeaturedQueryResult = NonNullable<Awaited<ReturnType<typeof getAnalyticsFeatured>>>
export type GetAnalyticsFeaturedQueryError = AxiosError<unknown>


export function useGetAnalyticsFeatured<TData = Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsFeatured>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsFeatured>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsFeatured<TData = Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAnalyticsFeatured>>,
          TError,
          Awaited<ReturnType<typeof getAnalyticsFeatured>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAnalyticsFeatured<TData = Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAnalyticsFeatured<TData = Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAnalyticsFeatured>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAnalyticsFeaturedQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



