/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteCart200,
  DeleteCartItemsProductId200,
  GetCart200,
  PostCartItems200,
  PostCartItemsBody,
  PutCartItemsProductId200,
  PutCartItemsProductIdBody
} from '../marketplaceAPI.schemas';





export const postCartItems = (
    postCartItemsBody: PostCartItemsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostCartItems200>> => {
    
    
    return axios.post(
      `http://localhost:4000/cart/items`,
      postCartItemsBody,options
    );
  }



export const getPostCartItemsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCartItems>>, TError,{data: PostCartItemsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postCartItems>>, TError,{data: PostCartItemsBody}, TContext> => {

const mutationKey = ['postCartItems'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCartItems>>, {data: PostCartItemsBody}> = (props) => {
          const {data} = props ?? {};

          return  postCartItems(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCartItemsMutationResult = NonNullable<Awaited<ReturnType<typeof postCartItems>>>
    export type PostCartItemsMutationBody = PostCartItemsBody
    export type PostCartItemsMutationError = AxiosError<unknown>

    export const usePostCartItems = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCartItems>>, TError,{data: PostCartItemsBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postCartItems>>,
        TError,
        {data: PostCartItemsBody},
        TContext
      > => {

      const mutationOptions = getPostCartItemsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putCartItemsProductId = (
    productId: string,
    putCartItemsProductIdBody: PutCartItemsProductIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutCartItemsProductId200>> => {
    
    
    return axios.put(
      `http://localhost:4000/cart/items/${productId}`,
      putCartItemsProductIdBody,options
    );
  }



export const getPutCartItemsProductIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCartItemsProductId>>, TError,{productId: string;data: PutCartItemsProductIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putCartItemsProductId>>, TError,{productId: string;data: PutCartItemsProductIdBody}, TContext> => {

const mutationKey = ['putCartItemsProductId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCartItemsProductId>>, {productId: string;data: PutCartItemsProductIdBody}> = (props) => {
          const {productId,data} = props ?? {};

          return  putCartItemsProductId(productId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCartItemsProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCartItemsProductId>>>
    export type PutCartItemsProductIdMutationBody = PutCartItemsProductIdBody
    export type PutCartItemsProductIdMutationError = AxiosError<unknown>

    export const usePutCartItemsProductId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCartItemsProductId>>, TError,{productId: string;data: PutCartItemsProductIdBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putCartItemsProductId>>,
        TError,
        {productId: string;data: PutCartItemsProductIdBody},
        TContext
      > => {

      const mutationOptions = getPutCartItemsProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCartItemsProductId = (
    productId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteCartItemsProductId200>> => {
    
    
    return axios.delete(
      `http://localhost:4000/cart/items/${productId}`,options
    );
  }



export const getDeleteCartItemsProductIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCartItemsProductId>>, TError,{productId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCartItemsProductId>>, TError,{productId: string}, TContext> => {

const mutationKey = ['deleteCartItemsProductId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCartItemsProductId>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  deleteCartItemsProductId(productId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCartItemsProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCartItemsProductId>>>
    
    export type DeleteCartItemsProductIdMutationError = AxiosError<unknown>

    export const useDeleteCartItemsProductId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCartItemsProductId>>, TError,{productId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCartItemsProductId>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteCartItemsProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getCart = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCart200>> => {
    
    
    return axios.get(
      `http://localhost:4000/cart`,options
    );
  }


export const getGetCartQueryKey = () => {
    return [`http://localhost:4000/cart`] as const;
    }

    
export const getGetCartQueryOptions = <TData = Awaited<ReturnType<typeof getCart>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCart>>> = ({ signal }) => getCart({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCartQueryResult = NonNullable<Awaited<ReturnType<typeof getCart>>>
export type GetCartQueryError = AxiosError<unknown>


export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCart>>,
          TError,
          Awaited<ReturnType<typeof getCart>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCart>>,
          TError,
          Awaited<ReturnType<typeof getCart>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCartQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteCart = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteCart200>> => {
    
    
    return axios.delete(
      `http://localhost:4000/cart`,options
    );
  }



export const getDeleteCartMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCart>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCart>>, TError,void, TContext> => {

const mutationKey = ['deleteCart'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCart>>, void> = () => {
          

          return  deleteCart(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCartMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCart>>>
    
    export type DeleteCartMutationError = AxiosError<unknown>

    export const useDeleteCart = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCart>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCart>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteCartMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    