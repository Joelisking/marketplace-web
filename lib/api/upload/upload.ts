/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteUploadDelete200,
  DeleteUploadDelete400,
  DeleteUploadDelete401,
  DeleteUploadDelete403,
  DeleteUploadDeleteBody,
  PostUploadPresignedUrl200,
  PostUploadPresignedUrl400,
  PostUploadPresignedUrl401,
  PostUploadPresignedUrl403,
  PostUploadPresignedUrlBody
} from '../marketplaceAPI.schemas';





export const postUploadPresignedUrl = (
    postUploadPresignedUrlBody: PostUploadPresignedUrlBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUploadPresignedUrl200>> => {
    
    
    return axios.post(
      `http://localhost:4000/upload/presigned-url`,
      postUploadPresignedUrlBody,options
    );
  }



export const getPostUploadPresignedUrlMutationOptions = <TError = AxiosError<PostUploadPresignedUrl400 | PostUploadPresignedUrl401 | PostUploadPresignedUrl403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUploadPresignedUrl>>, TError,{data: PostUploadPresignedUrlBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUploadPresignedUrl>>, TError,{data: PostUploadPresignedUrlBody}, TContext> => {

const mutationKey = ['postUploadPresignedUrl'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUploadPresignedUrl>>, {data: PostUploadPresignedUrlBody}> = (props) => {
          const {data} = props ?? {};

          return  postUploadPresignedUrl(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUploadPresignedUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postUploadPresignedUrl>>>
    export type PostUploadPresignedUrlMutationBody = PostUploadPresignedUrlBody
    export type PostUploadPresignedUrlMutationError = AxiosError<PostUploadPresignedUrl400 | PostUploadPresignedUrl401 | PostUploadPresignedUrl403>

    export const usePostUploadPresignedUrl = <TError = AxiosError<PostUploadPresignedUrl400 | PostUploadPresignedUrl401 | PostUploadPresignedUrl403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUploadPresignedUrl>>, TError,{data: PostUploadPresignedUrlBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postUploadPresignedUrl>>,
        TError,
        {data: PostUploadPresignedUrlBody},
        TContext
      > => {

      const mutationOptions = getPostUploadPresignedUrlMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteUploadDelete = (
    deleteUploadDeleteBody: DeleteUploadDeleteBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteUploadDelete200>> => {
    
    
    return axios.delete(
      `http://localhost:4000/upload/delete`,{data:
      deleteUploadDeleteBody, ...options}
    );
  }



export const getDeleteUploadDeleteMutationOptions = <TError = AxiosError<DeleteUploadDelete400 | DeleteUploadDelete401 | DeleteUploadDelete403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadDelete>>, TError,{data: DeleteUploadDeleteBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUploadDelete>>, TError,{data: DeleteUploadDeleteBody}, TContext> => {

const mutationKey = ['deleteUploadDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUploadDelete>>, {data: DeleteUploadDeleteBody}> = (props) => {
          const {data} = props ?? {};

          return  deleteUploadDelete(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUploadDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUploadDelete>>>
    export type DeleteUploadDeleteMutationBody = DeleteUploadDeleteBody
    export type DeleteUploadDeleteMutationError = AxiosError<DeleteUploadDelete400 | DeleteUploadDelete401 | DeleteUploadDelete403>

    export const useDeleteUploadDelete = <TError = AxiosError<DeleteUploadDelete400 | DeleteUploadDelete401 | DeleteUploadDelete403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadDelete>>, TError,{data: DeleteUploadDeleteBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteUploadDelete>>,
        TError,
        {data: DeleteUploadDeleteBody},
        TContext
      > => {

      const mutationOptions = getDeleteUploadDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    