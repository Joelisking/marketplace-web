/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetVendorOrders200,
  GetVendorOrdersOrderId200,
  GetVendorOrdersParams,
  GetVendorOrdersStats200,
  GetVendorOrdersStatsParams,
  PatchVendorOrdersOrderIdStatus200,
  PatchVendorOrdersOrderIdStatusBody
} from '../marketplaceAPI.schemas';





export const patchVendorOrdersOrderIdStatus = (
    orderId: string,
    patchVendorOrdersOrderIdStatusBody: PatchVendorOrdersOrderIdStatusBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchVendorOrdersOrderIdStatus200>> => {
    
    
    return axios.patch(
      `http://localhost:4000/vendor/orders/${orderId}/status`,
      patchVendorOrdersOrderIdStatusBody,options
    );
  }



export const getPatchVendorOrdersOrderIdStatusMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchVendorOrdersOrderIdStatus>>, TError,{orderId: string;data: PatchVendorOrdersOrderIdStatusBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchVendorOrdersOrderIdStatus>>, TError,{orderId: string;data: PatchVendorOrdersOrderIdStatusBody}, TContext> => {

const mutationKey = ['patchVendorOrdersOrderIdStatus'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchVendorOrdersOrderIdStatus>>, {orderId: string;data: PatchVendorOrdersOrderIdStatusBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  patchVendorOrdersOrderIdStatus(orderId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchVendorOrdersOrderIdStatusMutationResult = NonNullable<Awaited<ReturnType<typeof patchVendorOrdersOrderIdStatus>>>
    export type PatchVendorOrdersOrderIdStatusMutationBody = PatchVendorOrdersOrderIdStatusBody
    export type PatchVendorOrdersOrderIdStatusMutationError = AxiosError<unknown>

    export const usePatchVendorOrdersOrderIdStatus = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchVendorOrdersOrderIdStatus>>, TError,{orderId: string;data: PatchVendorOrdersOrderIdStatusBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchVendorOrdersOrderIdStatus>>,
        TError,
        {orderId: string;data: PatchVendorOrdersOrderIdStatusBody},
        TContext
      > => {

      const mutationOptions = getPatchVendorOrdersOrderIdStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVendorOrders = (
    params?: GetVendorOrdersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorOrders200>> => {
    
    
    return axios.get(
      `http://localhost:4000/vendor/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorOrdersQueryKey = (params?: GetVendorOrdersParams,) => {
    return [`http://localhost:4000/vendor/orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getVendorOrders>>, TError = AxiosError<unknown>>(params?: GetVendorOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorOrders>>> = ({ signal }) => getVendorOrders(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorOrders>>>
export type GetVendorOrdersQueryError = AxiosError<unknown>


export function useGetVendorOrders<TData = Awaited<ReturnType<typeof getVendorOrders>>, TError = AxiosError<unknown>>(
 params: undefined |  GetVendorOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrders>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrders<TData = Awaited<ReturnType<typeof getVendorOrders>>, TError = AxiosError<unknown>>(
 params?: GetVendorOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrders>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrders<TData = Awaited<ReturnType<typeof getVendorOrders>>, TError = AxiosError<unknown>>(
 params?: GetVendorOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorOrders<TData = Awaited<ReturnType<typeof getVendorOrders>>, TError = AxiosError<unknown>>(
 params?: GetVendorOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorOrdersStats = (
    params?: GetVendorOrdersStatsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorOrdersStats200>> => {
    
    
    return axios.get(
      `http://localhost:4000/vendor/orders/stats`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorOrdersStatsQueryKey = (params?: GetVendorOrdersStatsParams,) => {
    return [`http://localhost:4000/vendor/orders/stats`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorOrdersStatsQueryOptions = <TData = Awaited<ReturnType<typeof getVendorOrdersStats>>, TError = AxiosError<unknown>>(params?: GetVendorOrdersStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersStats>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorOrdersStatsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorOrdersStats>>> = ({ signal }) => getVendorOrdersStats(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorOrdersStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorOrdersStats>>>
export type GetVendorOrdersStatsQueryError = AxiosError<unknown>


export function useGetVendorOrdersStats<TData = Awaited<ReturnType<typeof getVendorOrdersStats>>, TError = AxiosError<unknown>>(
 params: undefined |  GetVendorOrdersStatsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrdersStats>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrdersStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrdersStats<TData = Awaited<ReturnType<typeof getVendorOrdersStats>>, TError = AxiosError<unknown>>(
 params?: GetVendorOrdersStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrdersStats>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrdersStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrdersStats<TData = Awaited<ReturnType<typeof getVendorOrdersStats>>, TError = AxiosError<unknown>>(
 params?: GetVendorOrdersStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorOrdersStats<TData = Awaited<ReturnType<typeof getVendorOrdersStats>>, TError = AxiosError<unknown>>(
 params?: GetVendorOrdersStatsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorOrdersStatsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorOrdersOrderId = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorOrdersOrderId200>> => {
    
    
    return axios.get(
      `http://localhost:4000/vendor/orders/${orderId}`,options
    );
  }


export const getGetVendorOrdersOrderIdQueryKey = (orderId: string,) => {
    return [`http://localhost:4000/vendor/orders/${orderId}`] as const;
    }

    
export const getGetVendorOrdersOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError = AxiosError<unknown>>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorOrdersOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorOrdersOrderId>>> = ({ signal }) => getVendorOrdersOrderId(orderId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorOrdersOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorOrdersOrderId>>>
export type GetVendorOrdersOrderIdQueryError = AxiosError<unknown>


export function useGetVendorOrdersOrderId<TData = Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrdersOrderId>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrdersOrderId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrdersOrderId<TData = Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrdersOrderId>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrdersOrderId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrdersOrderId<TData = Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorOrdersOrderId<TData = Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError = AxiosError<unknown>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorOrdersOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



