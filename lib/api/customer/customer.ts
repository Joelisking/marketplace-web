/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetCustomerAnalytics200,
  GetCustomerAnalytics401,
  GetCustomerAnalyticsParams,
  GetCustomerDashboard200,
  GetCustomerDashboard401,
  GetCustomerDashboardParams,
  GetCustomerOrders200,
  GetCustomerOrders400,
  GetCustomerOrdersOrderId200,
  GetCustomerOrdersOrderId400,
  GetCustomerOrdersOrderIdTracking200,
  GetCustomerOrdersOrderIdTracking400,
  GetCustomerOrdersParams,
  GetCustomerPreferences200,
  GetCustomerPreferences401,
  GetCustomerStats200,
  GetCustomerStats400
} from '../marketplaceAPI.schemas';





export const getCustomerOrders = (
    params?: GetCustomerOrdersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCustomerOrders200>> => {
    
    
    return axios.get(
      `http://localhost:4000/customer/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCustomerOrdersQueryKey = (params?: GetCustomerOrdersParams,) => {
    return [`http://localhost:4000/customer/orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCustomerOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerOrders>>, TError = AxiosError<GetCustomerOrders400 | void>>(params?: GetCustomerOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerOrders>>> = ({ signal }) => getCustomerOrders(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerOrders>>>
export type GetCustomerOrdersQueryError = AxiosError<GetCustomerOrders400 | void>


export function useGetCustomerOrders<TData = Awaited<ReturnType<typeof getCustomerOrders>>, TError = AxiosError<GetCustomerOrders400 | void>>(
 params: undefined |  GetCustomerOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrders>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrders<TData = Awaited<ReturnType<typeof getCustomerOrders>>, TError = AxiosError<GetCustomerOrders400 | void>>(
 params?: GetCustomerOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrders>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrders>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrders<TData = Awaited<ReturnType<typeof getCustomerOrders>>, TError = AxiosError<GetCustomerOrders400 | void>>(
 params?: GetCustomerOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomerOrders<TData = Awaited<ReturnType<typeof getCustomerOrders>>, TError = AxiosError<GetCustomerOrders400 | void>>(
 params?: GetCustomerOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrders>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCustomerOrdersOrderId = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCustomerOrdersOrderId200>> => {
    
    
    return axios.get(
      `http://localhost:4000/customer/orders/${orderId}`,options
    );
  }


export const getGetCustomerOrdersOrderIdQueryKey = (orderId: string,) => {
    return [`http://localhost:4000/customer/orders/${orderId}`] as const;
    }

    
export const getGetCustomerOrdersOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError = AxiosError<GetCustomerOrdersOrderId400 | void>>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerOrdersOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>> = ({ signal }) => getCustomerOrdersOrderId(orderId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerOrdersOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>>
export type GetCustomerOrdersOrderIdQueryError = AxiosError<GetCustomerOrdersOrderId400 | void>


export function useGetCustomerOrdersOrderId<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError = AxiosError<GetCustomerOrdersOrderId400 | void>>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrdersOrderId>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrdersOrderId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrdersOrderId<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError = AxiosError<GetCustomerOrdersOrderId400 | void>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrdersOrderId>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrdersOrderId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrdersOrderId<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError = AxiosError<GetCustomerOrdersOrderId400 | void>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomerOrdersOrderId<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError = AxiosError<GetCustomerOrdersOrderId400 | void>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerOrdersOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCustomerOrdersOrderIdTracking = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCustomerOrdersOrderIdTracking200>> => {
    
    
    return axios.get(
      `http://localhost:4000/customer/orders/${orderId}/tracking`,options
    );
  }


export const getGetCustomerOrdersOrderIdTrackingQueryKey = (orderId: string,) => {
    return [`http://localhost:4000/customer/orders/${orderId}/tracking`] as const;
    }

    
export const getGetCustomerOrdersOrderIdTrackingQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError = AxiosError<GetCustomerOrdersOrderIdTracking400 | void>>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerOrdersOrderIdTrackingQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>> = ({ signal }) => getCustomerOrdersOrderIdTracking(orderId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerOrdersOrderIdTrackingQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>>
export type GetCustomerOrdersOrderIdTrackingQueryError = AxiosError<GetCustomerOrdersOrderIdTracking400 | void>


export function useGetCustomerOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError = AxiosError<GetCustomerOrdersOrderIdTracking400 | void>>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError = AxiosError<GetCustomerOrdersOrderIdTracking400 | void>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError = AxiosError<GetCustomerOrdersOrderIdTracking400 | void>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomerOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError = AxiosError<GetCustomerOrdersOrderIdTracking400 | void>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrdersOrderIdTracking>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerOrdersOrderIdTrackingQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCustomerStats = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCustomerStats200>> => {
    
    
    return axios.get(
      `http://localhost:4000/customer/stats`,options
    );
  }


export const getGetCustomerStatsQueryKey = () => {
    return [`http://localhost:4000/customer/stats`] as const;
    }

    
export const getGetCustomerStatsQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerStats>>, TError = AxiosError<GetCustomerStats400 | void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerStats>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerStats>>> = ({ signal }) => getCustomerStats({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerStats>>>
export type GetCustomerStatsQueryError = AxiosError<GetCustomerStats400 | void>


export function useGetCustomerStats<TData = Awaited<ReturnType<typeof getCustomerStats>>, TError = AxiosError<GetCustomerStats400 | void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerStats>>,
          TError,
          Awaited<ReturnType<typeof getCustomerStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerStats<TData = Awaited<ReturnType<typeof getCustomerStats>>, TError = AxiosError<GetCustomerStats400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerStats>>,
          TError,
          Awaited<ReturnType<typeof getCustomerStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerStats<TData = Awaited<ReturnType<typeof getCustomerStats>>, TError = AxiosError<GetCustomerStats400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomerStats<TData = Awaited<ReturnType<typeof getCustomerStats>>, TError = AxiosError<GetCustomerStats400 | void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCustomerDashboard = (
    params?: GetCustomerDashboardParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCustomerDashboard200>> => {
    
    
    return axios.get(
      `http://localhost:4000/customer/dashboard`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCustomerDashboardQueryKey = (params?: GetCustomerDashboardParams,) => {
    return [`http://localhost:4000/customer/dashboard`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCustomerDashboardQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerDashboard>>, TError = AxiosError<GetCustomerDashboard401>>(params?: GetCustomerDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerDashboardQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerDashboard>>> = ({ signal }) => getCustomerDashboard(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerDashboard>>>
export type GetCustomerDashboardQueryError = AxiosError<GetCustomerDashboard401>


export function useGetCustomerDashboard<TData = Awaited<ReturnType<typeof getCustomerDashboard>>, TError = AxiosError<GetCustomerDashboard401>>(
 params: undefined |  GetCustomerDashboardParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerDashboard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerDashboard>>,
          TError,
          Awaited<ReturnType<typeof getCustomerDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerDashboard<TData = Awaited<ReturnType<typeof getCustomerDashboard>>, TError = AxiosError<GetCustomerDashboard401>>(
 params?: GetCustomerDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerDashboard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerDashboard>>,
          TError,
          Awaited<ReturnType<typeof getCustomerDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerDashboard<TData = Awaited<ReturnType<typeof getCustomerDashboard>>, TError = AxiosError<GetCustomerDashboard401>>(
 params?: GetCustomerDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomerDashboard<TData = Awaited<ReturnType<typeof getCustomerDashboard>>, TError = AxiosError<GetCustomerDashboard401>>(
 params?: GetCustomerDashboardParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerDashboardQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCustomerAnalytics = (
    params?: GetCustomerAnalyticsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCustomerAnalytics200>> => {
    
    
    return axios.get(
      `http://localhost:4000/customer/analytics`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCustomerAnalyticsQueryKey = (params?: GetCustomerAnalyticsParams,) => {
    return [`http://localhost:4000/customer/analytics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCustomerAnalyticsQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerAnalytics>>, TError = AxiosError<GetCustomerAnalytics401>>(params?: GetCustomerAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerAnalyticsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerAnalytics>>> = ({ signal }) => getCustomerAnalytics(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerAnalytics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerAnalyticsQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerAnalytics>>>
export type GetCustomerAnalyticsQueryError = AxiosError<GetCustomerAnalytics401>


export function useGetCustomerAnalytics<TData = Awaited<ReturnType<typeof getCustomerAnalytics>>, TError = AxiosError<GetCustomerAnalytics401>>(
 params: undefined |  GetCustomerAnalyticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerAnalytics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getCustomerAnalytics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerAnalytics<TData = Awaited<ReturnType<typeof getCustomerAnalytics>>, TError = AxiosError<GetCustomerAnalytics401>>(
 params?: GetCustomerAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerAnalytics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getCustomerAnalytics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerAnalytics<TData = Awaited<ReturnType<typeof getCustomerAnalytics>>, TError = AxiosError<GetCustomerAnalytics401>>(
 params?: GetCustomerAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomerAnalytics<TData = Awaited<ReturnType<typeof getCustomerAnalytics>>, TError = AxiosError<GetCustomerAnalytics401>>(
 params?: GetCustomerAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerAnalyticsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCustomerPreferences = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCustomerPreferences200>> => {
    
    
    return axios.get(
      `http://localhost:4000/customer/preferences`,options
    );
  }


export const getGetCustomerPreferencesQueryKey = () => {
    return [`http://localhost:4000/customer/preferences`] as const;
    }

    
export const getGetCustomerPreferencesQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerPreferences>>, TError = AxiosError<GetCustomerPreferences401>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerPreferences>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerPreferencesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerPreferences>>> = ({ signal }) => getCustomerPreferences({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerPreferences>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerPreferencesQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerPreferences>>>
export type GetCustomerPreferencesQueryError = AxiosError<GetCustomerPreferences401>


export function useGetCustomerPreferences<TData = Awaited<ReturnType<typeof getCustomerPreferences>>, TError = AxiosError<GetCustomerPreferences401>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerPreferences>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerPreferences>>,
          TError,
          Awaited<ReturnType<typeof getCustomerPreferences>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerPreferences<TData = Awaited<ReturnType<typeof getCustomerPreferences>>, TError = AxiosError<GetCustomerPreferences401>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerPreferences>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerPreferences>>,
          TError,
          Awaited<ReturnType<typeof getCustomerPreferences>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerPreferences<TData = Awaited<ReturnType<typeof getCustomerPreferences>>, TError = AxiosError<GetCustomerPreferences401>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerPreferences>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomerPreferences<TData = Awaited<ReturnType<typeof getCustomerPreferences>>, TError = AxiosError<GetCustomerPreferences401>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerPreferences>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerPreferencesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



