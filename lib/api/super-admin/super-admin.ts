/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetSuperAnalytics200,
  GetSuperPaymentsOverview200,
  GetSuperPaymentsOverviewParams,
  GetSuperSystemOverview200,
  GetSuperSystemOverviewParams,
  GetSuperVendors200,
  GetSuperVendorsParams,
  GetSuperVendorsVendorId200
} from '../marketplaceAPI.schemas';





export const getSuperSystemOverview = (
    params?: GetSuperSystemOverviewParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetSuperSystemOverview200>> => {
    
    
    return axios.get(
      `/super/system/overview`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetSuperSystemOverviewQueryKey = (params?: GetSuperSystemOverviewParams,) => {
    return [`/super/system/overview`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSuperSystemOverviewQueryOptions = <TData = Awaited<ReturnType<typeof getSuperSystemOverview>>, TError = AxiosError<void>>(params?: GetSuperSystemOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperSystemOverview>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSuperSystemOverviewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSuperSystemOverview>>> = ({ signal }) => getSuperSystemOverview(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSuperSystemOverview>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSuperSystemOverviewQueryResult = NonNullable<Awaited<ReturnType<typeof getSuperSystemOverview>>>
export type GetSuperSystemOverviewQueryError = AxiosError<void>


export function useGetSuperSystemOverview<TData = Awaited<ReturnType<typeof getSuperSystemOverview>>, TError = AxiosError<void>>(
 params: undefined |  GetSuperSystemOverviewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperSystemOverview>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperSystemOverview>>,
          TError,
          Awaited<ReturnType<typeof getSuperSystemOverview>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperSystemOverview<TData = Awaited<ReturnType<typeof getSuperSystemOverview>>, TError = AxiosError<void>>(
 params?: GetSuperSystemOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperSystemOverview>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperSystemOverview>>,
          TError,
          Awaited<ReturnType<typeof getSuperSystemOverview>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperSystemOverview<TData = Awaited<ReturnType<typeof getSuperSystemOverview>>, TError = AxiosError<void>>(
 params?: GetSuperSystemOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperSystemOverview>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSuperSystemOverview<TData = Awaited<ReturnType<typeof getSuperSystemOverview>>, TError = AxiosError<void>>(
 params?: GetSuperSystemOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperSystemOverview>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSuperSystemOverviewQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSuperVendors = (
    params?: GetSuperVendorsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetSuperVendors200>> => {
    
    
    return axios.get(
      `/super/vendors`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetSuperVendorsQueryKey = (params?: GetSuperVendorsParams,) => {
    return [`/super/vendors`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSuperVendorsQueryOptions = <TData = Awaited<ReturnType<typeof getSuperVendors>>, TError = AxiosError<void>>(params?: GetSuperVendorsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendors>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSuperVendorsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSuperVendors>>> = ({ signal }) => getSuperVendors(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSuperVendors>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSuperVendorsQueryResult = NonNullable<Awaited<ReturnType<typeof getSuperVendors>>>
export type GetSuperVendorsQueryError = AxiosError<void>


export function useGetSuperVendors<TData = Awaited<ReturnType<typeof getSuperVendors>>, TError = AxiosError<void>>(
 params: undefined |  GetSuperVendorsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendors>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperVendors>>,
          TError,
          Awaited<ReturnType<typeof getSuperVendors>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperVendors<TData = Awaited<ReturnType<typeof getSuperVendors>>, TError = AxiosError<void>>(
 params?: GetSuperVendorsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendors>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperVendors>>,
          TError,
          Awaited<ReturnType<typeof getSuperVendors>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperVendors<TData = Awaited<ReturnType<typeof getSuperVendors>>, TError = AxiosError<void>>(
 params?: GetSuperVendorsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendors>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSuperVendors<TData = Awaited<ReturnType<typeof getSuperVendors>>, TError = AxiosError<void>>(
 params?: GetSuperVendorsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendors>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSuperVendorsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSuperPaymentsOverview = (
    params?: GetSuperPaymentsOverviewParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetSuperPaymentsOverview200>> => {
    
    
    return axios.get(
      `/super/payments/overview`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetSuperPaymentsOverviewQueryKey = (params?: GetSuperPaymentsOverviewParams,) => {
    return [`/super/payments/overview`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSuperPaymentsOverviewQueryOptions = <TData = Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError = AxiosError<void>>(params?: GetSuperPaymentsOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSuperPaymentsOverviewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSuperPaymentsOverview>>> = ({ signal }) => getSuperPaymentsOverview(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSuperPaymentsOverviewQueryResult = NonNullable<Awaited<ReturnType<typeof getSuperPaymentsOverview>>>
export type GetSuperPaymentsOverviewQueryError = AxiosError<void>


export function useGetSuperPaymentsOverview<TData = Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError = AxiosError<void>>(
 params: undefined |  GetSuperPaymentsOverviewParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperPaymentsOverview>>,
          TError,
          Awaited<ReturnType<typeof getSuperPaymentsOverview>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperPaymentsOverview<TData = Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError = AxiosError<void>>(
 params?: GetSuperPaymentsOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperPaymentsOverview>>,
          TError,
          Awaited<ReturnType<typeof getSuperPaymentsOverview>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperPaymentsOverview<TData = Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError = AxiosError<void>>(
 params?: GetSuperPaymentsOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSuperPaymentsOverview<TData = Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError = AxiosError<void>>(
 params?: GetSuperPaymentsOverviewParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperPaymentsOverview>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSuperPaymentsOverviewQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSuperVendorsVendorId = (
    vendorId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetSuperVendorsVendorId200>> => {
    
    
    return axios.get(
      `/super/vendors/${vendorId}`,options
    );
  }


export const getGetSuperVendorsVendorIdQueryKey = (vendorId: string,) => {
    return [`/super/vendors/${vendorId}`] as const;
    }

    
export const getGetSuperVendorsVendorIdQueryOptions = <TData = Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError = AxiosError<void>>(vendorId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSuperVendorsVendorIdQueryKey(vendorId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSuperVendorsVendorId>>> = ({ signal }) => getSuperVendorsVendorId(vendorId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(vendorId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSuperVendorsVendorIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSuperVendorsVendorId>>>
export type GetSuperVendorsVendorIdQueryError = AxiosError<void>


export function useGetSuperVendorsVendorId<TData = Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError = AxiosError<void>>(
 vendorId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperVendorsVendorId>>,
          TError,
          Awaited<ReturnType<typeof getSuperVendorsVendorId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperVendorsVendorId<TData = Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError = AxiosError<void>>(
 vendorId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperVendorsVendorId>>,
          TError,
          Awaited<ReturnType<typeof getSuperVendorsVendorId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperVendorsVendorId<TData = Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError = AxiosError<void>>(
 vendorId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSuperVendorsVendorId<TData = Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError = AxiosError<void>>(
 vendorId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperVendorsVendorId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSuperVendorsVendorIdQueryOptions(vendorId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSuperAnalytics = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetSuperAnalytics200>> => {
    
    
    return axios.get(
      `/super/analytics`,options
    );
  }


export const getGetSuperAnalyticsQueryKey = () => {
    return [`/super/analytics`] as const;
    }

    
export const getGetSuperAnalyticsQueryOptions = <TData = Awaited<ReturnType<typeof getSuperAnalytics>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSuperAnalyticsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSuperAnalytics>>> = ({ signal }) => getSuperAnalytics({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSuperAnalytics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSuperAnalyticsQueryResult = NonNullable<Awaited<ReturnType<typeof getSuperAnalytics>>>
export type GetSuperAnalyticsQueryError = AxiosError<void>


export function useGetSuperAnalytics<TData = Awaited<ReturnType<typeof getSuperAnalytics>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperAnalytics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getSuperAnalytics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperAnalytics<TData = Awaited<ReturnType<typeof getSuperAnalytics>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperAnalytics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuperAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getSuperAnalytics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuperAnalytics<TData = Awaited<ReturnType<typeof getSuperAnalytics>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSuperAnalytics<TData = Awaited<ReturnType<typeof getSuperAnalytics>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuperAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSuperAnalyticsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



