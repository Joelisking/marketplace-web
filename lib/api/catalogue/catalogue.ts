/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteProductsId401,
  DeleteProductsId403,
  DeleteProductsId404,
  DeleteStoresSlug401,
  DeleteStoresSlug403,
  DeleteStoresSlug404,
  GetProducts200,
  GetProductsId200,
  GetProductsId404,
  GetProductsParams,
  GetStores200,
  GetStoresParams,
  GetStoresSlug200,
  GetStoresSlug404,
  GetStoresSlugProducts200,
  GetStoresSlugProducts404,
  GetStoresSlugProductsParams,
  PostProducts201,
  PostProducts401,
  PostProducts403,
  PostProductsBody,
  PostStores201,
  PostStores401,
  PostStores409,
  PostStoresBody,
  PutProductsId200,
  PutProductsId401,
  PutProductsId403,
  PutProductsId404,
  PutProductsIdBody,
  PutStoresSlug200,
  PutStoresSlug401,
  PutStoresSlug403,
  PutStoresSlug404,
  PutStoresSlug409,
  PutStoresSlugBody
} from '../marketplaceAPI.schemas';





export const getProducts = (
    params?: GetProductsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProducts200>> => {
    
    
    return axios.get(
      `http://localhost:4000/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetProductsQueryKey = (params?: GetProductsParams,) => {
    return [`http://localhost:4000/products`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsQueryOptions = <TData = Awaited<ReturnType<typeof getProducts>>, TError = AxiosError<unknown>>(params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({ signal }) => getProducts(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getProducts>>>
export type GetProductsQueryError = AxiosError<unknown>


export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = AxiosError<unknown>>(
 params: undefined |  GetProductsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = AxiosError<unknown>>(
 params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = AxiosError<unknown>>(
 params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = AxiosError<unknown>>(
 params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postProducts = (
    postProductsBody: PostProductsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostProducts201>> => {
    
    
    return axios.post(
      `http://localhost:4000/products`,
      postProductsBody,options
    );
  }



export const getPostProductsMutationOptions = <TError = AxiosError<PostProducts401 | PostProducts403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProducts>>, TError,{data: PostProductsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postProducts>>, TError,{data: PostProductsBody}, TContext> => {

const mutationKey = ['postProducts'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProducts>>, {data: PostProductsBody}> = (props) => {
          const {data} = props ?? {};

          return  postProducts(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postProducts>>>
    export type PostProductsMutationBody = PostProductsBody
    export type PostProductsMutationError = AxiosError<PostProducts401 | PostProducts403>

    export const usePostProducts = <TError = AxiosError<PostProducts401 | PostProducts403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProducts>>, TError,{data: PostProductsBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProducts>>,
        TError,
        {data: PostProductsBody},
        TContext
      > => {

      const mutationOptions = getPostProductsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getProductsId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProductsId200>> => {
    
    
    return axios.get(
      `http://localhost:4000/products/${id}`,options
    );
  }


export const getGetProductsIdQueryKey = (id: string,) => {
    return [`http://localhost:4000/products/${id}`] as const;
    }

    
export const getGetProductsIdQueryOptions = <TData = Awaited<ReturnType<typeof getProductsId>>, TError = AxiosError<GetProductsId404>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsId>>> = ({ signal }) => getProductsId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsId>>>
export type GetProductsIdQueryError = AxiosError<GetProductsId404>


export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = AxiosError<GetProductsId404>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsId>>,
          TError,
          Awaited<ReturnType<typeof getProductsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = AxiosError<GetProductsId404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsId>>,
          TError,
          Awaited<ReturnType<typeof getProductsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = AxiosError<GetProductsId404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = AxiosError<GetProductsId404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putProductsId = (
    id: string,
    putProductsIdBody: PutProductsIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutProductsId200>> => {
    
    
    return axios.put(
      `http://localhost:4000/products/${id}`,
      putProductsIdBody,options
    );
  }



export const getPutProductsIdMutationOptions = <TError = AxiosError<PutProductsId401 | PutProductsId403 | PutProductsId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsId>>, TError,{id: string;data: PutProductsIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putProductsId>>, TError,{id: string;data: PutProductsIdBody}, TContext> => {

const mutationKey = ['putProductsId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProductsId>>, {id: string;data: PutProductsIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putProductsId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProductsId>>>
    export type PutProductsIdMutationBody = PutProductsIdBody
    export type PutProductsIdMutationError = AxiosError<PutProductsId401 | PutProductsId403 | PutProductsId404>

    export const usePutProductsId = <TError = AxiosError<PutProductsId401 | PutProductsId403 | PutProductsId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsId>>, TError,{id: string;data: PutProductsIdBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProductsId>>,
        TError,
        {id: string;data: PutProductsIdBody},
        TContext
      > => {

      const mutationOptions = getPutProductsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteProductsId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `http://localhost:4000/products/${id}`,options
    );
  }



export const getDeleteProductsIdMutationOptions = <TError = AxiosError<DeleteProductsId401 | DeleteProductsId403 | DeleteProductsId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteProductsId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductsId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsId>>>
    
    export type DeleteProductsIdMutationError = AxiosError<DeleteProductsId401 | DeleteProductsId403 | DeleteProductsId404>

    export const useDeleteProductsId = <TError = AxiosError<DeleteProductsId401 | DeleteProductsId403 | DeleteProductsId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getStores = (
    params?: GetStoresParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetStores200>> => {
    
    
    return axios.get(
      `http://localhost:4000/stores`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetStoresQueryKey = (params?: GetStoresParams,) => {
    return [`http://localhost:4000/stores`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStoresQueryOptions = <TData = Awaited<ReturnType<typeof getStores>>, TError = AxiosError<unknown>>(params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStoresQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStores>>> = ({ signal }) => getStores(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStoresQueryResult = NonNullable<Awaited<ReturnType<typeof getStores>>>
export type GetStoresQueryError = AxiosError<unknown>


export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = AxiosError<unknown>>(
 params: undefined |  GetStoresParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStores>>,
          TError,
          Awaited<ReturnType<typeof getStores>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = AxiosError<unknown>>(
 params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStores>>,
          TError,
          Awaited<ReturnType<typeof getStores>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = AxiosError<unknown>>(
 params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetStores<TData = Awaited<ReturnType<typeof getStores>>, TError = AxiosError<unknown>>(
 params?: GetStoresParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStores>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStoresQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postStores = (
    postStoresBody: PostStoresBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostStores201>> => {
    
    
    return axios.post(
      `http://localhost:4000/stores`,
      postStoresBody,options
    );
  }



export const getPostStoresMutationOptions = <TError = AxiosError<PostStores401 | PostStores409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStores>>, TError,{data: PostStoresBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postStores>>, TError,{data: PostStoresBody}, TContext> => {

const mutationKey = ['postStores'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStores>>, {data: PostStoresBody}> = (props) => {
          const {data} = props ?? {};

          return  postStores(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStoresMutationResult = NonNullable<Awaited<ReturnType<typeof postStores>>>
    export type PostStoresMutationBody = PostStoresBody
    export type PostStoresMutationError = AxiosError<PostStores401 | PostStores409>

    export const usePostStores = <TError = AxiosError<PostStores401 | PostStores409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStores>>, TError,{data: PostStoresBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postStores>>,
        TError,
        {data: PostStoresBody},
        TContext
      > => {

      const mutationOptions = getPostStoresMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getStoresSlug = (
    slug: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetStoresSlug200>> => {
    
    
    return axios.get(
      `http://localhost:4000/stores/${slug}`,options
    );
  }


export const getGetStoresSlugQueryKey = (slug: string,) => {
    return [`http://localhost:4000/stores/${slug}`] as const;
    }

    
export const getGetStoresSlugQueryOptions = <TData = Awaited<ReturnType<typeof getStoresSlug>>, TError = AxiosError<GetStoresSlug404>>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlug>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStoresSlugQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStoresSlug>>> = ({ signal }) => getStoresSlug(slug, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(slug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStoresSlug>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStoresSlugQueryResult = NonNullable<Awaited<ReturnType<typeof getStoresSlug>>>
export type GetStoresSlugQueryError = AxiosError<GetStoresSlug404>


export function useGetStoresSlug<TData = Awaited<ReturnType<typeof getStoresSlug>>, TError = AxiosError<GetStoresSlug404>>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlug>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStoresSlug>>,
          TError,
          Awaited<ReturnType<typeof getStoresSlug>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStoresSlug<TData = Awaited<ReturnType<typeof getStoresSlug>>, TError = AxiosError<GetStoresSlug404>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlug>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStoresSlug>>,
          TError,
          Awaited<ReturnType<typeof getStoresSlug>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStoresSlug<TData = Awaited<ReturnType<typeof getStoresSlug>>, TError = AxiosError<GetStoresSlug404>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlug>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetStoresSlug<TData = Awaited<ReturnType<typeof getStoresSlug>>, TError = AxiosError<GetStoresSlug404>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlug>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStoresSlugQueryOptions(slug,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putStoresSlug = (
    slug: string,
    putStoresSlugBody: PutStoresSlugBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutStoresSlug200>> => {
    
    
    return axios.put(
      `http://localhost:4000/stores/${slug}`,
      putStoresSlugBody,options
    );
  }



export const getPutStoresSlugMutationOptions = <TError = AxiosError<PutStoresSlug401 | PutStoresSlug403 | PutStoresSlug404 | PutStoresSlug409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStoresSlug>>, TError,{slug: string;data: PutStoresSlugBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putStoresSlug>>, TError,{slug: string;data: PutStoresSlugBody}, TContext> => {

const mutationKey = ['putStoresSlug'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStoresSlug>>, {slug: string;data: PutStoresSlugBody}> = (props) => {
          const {slug,data} = props ?? {};

          return  putStoresSlug(slug,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStoresSlugMutationResult = NonNullable<Awaited<ReturnType<typeof putStoresSlug>>>
    export type PutStoresSlugMutationBody = PutStoresSlugBody
    export type PutStoresSlugMutationError = AxiosError<PutStoresSlug401 | PutStoresSlug403 | PutStoresSlug404 | PutStoresSlug409>

    export const usePutStoresSlug = <TError = AxiosError<PutStoresSlug401 | PutStoresSlug403 | PutStoresSlug404 | PutStoresSlug409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStoresSlug>>, TError,{slug: string;data: PutStoresSlugBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putStoresSlug>>,
        TError,
        {slug: string;data: PutStoresSlugBody},
        TContext
      > => {

      const mutationOptions = getPutStoresSlugMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteStoresSlug = (
    slug: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `http://localhost:4000/stores/${slug}`,options
    );
  }



export const getDeleteStoresSlugMutationOptions = <TError = AxiosError<DeleteStoresSlug401 | DeleteStoresSlug403 | DeleteStoresSlug404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStoresSlug>>, TError,{slug: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteStoresSlug>>, TError,{slug: string}, TContext> => {

const mutationKey = ['deleteStoresSlug'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStoresSlug>>, {slug: string}> = (props) => {
          const {slug} = props ?? {};

          return  deleteStoresSlug(slug,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStoresSlugMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStoresSlug>>>
    
    export type DeleteStoresSlugMutationError = AxiosError<DeleteStoresSlug401 | DeleteStoresSlug403 | DeleteStoresSlug404>

    export const useDeleteStoresSlug = <TError = AxiosError<DeleteStoresSlug401 | DeleteStoresSlug403 | DeleteStoresSlug404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStoresSlug>>, TError,{slug: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteStoresSlug>>,
        TError,
        {slug: string},
        TContext
      > => {

      const mutationOptions = getDeleteStoresSlugMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getStoresSlugProducts = (
    slug: string,
    params?: GetStoresSlugProductsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetStoresSlugProducts200>> => {
    
    
    return axios.get(
      `http://localhost:4000/stores/${slug}/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetStoresSlugProductsQueryKey = (slug: string,
    params?: GetStoresSlugProductsParams,) => {
    return [`http://localhost:4000/stores/${slug}/products`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStoresSlugProductsQueryOptions = <TData = Awaited<ReturnType<typeof getStoresSlugProducts>>, TError = AxiosError<GetStoresSlugProducts404>>(slug: string,
    params?: GetStoresSlugProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlugProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStoresSlugProductsQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStoresSlugProducts>>> = ({ signal }) => getStoresSlugProducts(slug,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(slug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStoresSlugProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStoresSlugProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getStoresSlugProducts>>>
export type GetStoresSlugProductsQueryError = AxiosError<GetStoresSlugProducts404>


export function useGetStoresSlugProducts<TData = Awaited<ReturnType<typeof getStoresSlugProducts>>, TError = AxiosError<GetStoresSlugProducts404>>(
 slug: string,
    params: undefined |  GetStoresSlugProductsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlugProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStoresSlugProducts>>,
          TError,
          Awaited<ReturnType<typeof getStoresSlugProducts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStoresSlugProducts<TData = Awaited<ReturnType<typeof getStoresSlugProducts>>, TError = AxiosError<GetStoresSlugProducts404>>(
 slug: string,
    params?: GetStoresSlugProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlugProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStoresSlugProducts>>,
          TError,
          Awaited<ReturnType<typeof getStoresSlugProducts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStoresSlugProducts<TData = Awaited<ReturnType<typeof getStoresSlugProducts>>, TError = AxiosError<GetStoresSlugProducts404>>(
 slug: string,
    params?: GetStoresSlugProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlugProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetStoresSlugProducts<TData = Awaited<ReturnType<typeof getStoresSlugProducts>>, TError = AxiosError<GetStoresSlugProducts404>>(
 slug: string,
    params?: GetStoresSlugProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStoresSlugProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStoresSlugProductsQueryOptions(slug,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



