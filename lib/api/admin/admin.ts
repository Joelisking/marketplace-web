/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteVendorOnboardingAdminApplicationsApplicationIdCleanup200,
  GetVendorOnboardingAdminApplications200,
  GetVendorOnboardingAdminApplicationsApplicationId200,
  GetVendorOnboardingAdminApplicationsParams,
  GetVendorOnboardingAdminDashboard200,
  PostVendorOnboardingAdminApplicationsApplicationIdReview200,
  PostVendorOnboardingAdminApplicationsApplicationIdReviewBody,
  PostVendorOnboardingAdminCleanupOrphaned200,
  PostVendorOnboardingAdminDocumentsDocumentIdVerify200,
  PutVendorOnboardingAdminApplicationsApplicationIdStatus200
} from '../marketplaceAPI.schemas';





export const getVendorOnboardingAdminApplications = (
    params?: GetVendorOnboardingAdminApplicationsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorOnboardingAdminApplications200>> => {
    
    
    return axios.get(
      `http://localhost:4000/vendor-onboarding/admin/applications`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorOnboardingAdminApplicationsQueryKey = (params?: GetVendorOnboardingAdminApplicationsParams,) => {
    return [`http://localhost:4000/vendor-onboarding/admin/applications`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorOnboardingAdminApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError = AxiosError<void>>(params?: GetVendorOnboardingAdminApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorOnboardingAdminApplicationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>> = ({ signal }) => getVendorOnboardingAdminApplications(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorOnboardingAdminApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>>
export type GetVendorOnboardingAdminApplicationsQueryError = AxiosError<void>


export function useGetVendorOnboardingAdminApplications<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError = AxiosError<void>>(
 params: undefined |  GetVendorOnboardingAdminApplicationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>,
          TError,
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOnboardingAdminApplications<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError = AxiosError<void>>(
 params?: GetVendorOnboardingAdminApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>,
          TError,
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOnboardingAdminApplications<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError = AxiosError<void>>(
 params?: GetVendorOnboardingAdminApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorOnboardingAdminApplications<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError = AxiosError<void>>(
 params?: GetVendorOnboardingAdminApplicationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorOnboardingAdminApplicationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postVendorOnboardingAdminApplicationsApplicationIdReview = (
    applicationId: string,
    postVendorOnboardingAdminApplicationsApplicationIdReviewBody: PostVendorOnboardingAdminApplicationsApplicationIdReviewBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorOnboardingAdminApplicationsApplicationIdReview200>> => {
    
    
    return axios.post(
      `http://localhost:4000/vendor-onboarding/admin/applications/${applicationId}/review`,
      postVendorOnboardingAdminApplicationsApplicationIdReviewBody,options
    );
  }



export const getPostVendorOnboardingAdminApplicationsApplicationIdReviewMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminApplicationsApplicationIdReview>>, TError,{applicationId: string;data: PostVendorOnboardingAdminApplicationsApplicationIdReviewBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminApplicationsApplicationIdReview>>, TError,{applicationId: string;data: PostVendorOnboardingAdminApplicationsApplicationIdReviewBody}, TContext> => {

const mutationKey = ['postVendorOnboardingAdminApplicationsApplicationIdReview'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorOnboardingAdminApplicationsApplicationIdReview>>, {applicationId: string;data: PostVendorOnboardingAdminApplicationsApplicationIdReviewBody}> = (props) => {
          const {applicationId,data} = props ?? {};

          return  postVendorOnboardingAdminApplicationsApplicationIdReview(applicationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorOnboardingAdminApplicationsApplicationIdReviewMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorOnboardingAdminApplicationsApplicationIdReview>>>
    export type PostVendorOnboardingAdminApplicationsApplicationIdReviewMutationBody = PostVendorOnboardingAdminApplicationsApplicationIdReviewBody
    export type PostVendorOnboardingAdminApplicationsApplicationIdReviewMutationError = AxiosError<void>

    export const usePostVendorOnboardingAdminApplicationsApplicationIdReview = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminApplicationsApplicationIdReview>>, TError,{applicationId: string;data: PostVendorOnboardingAdminApplicationsApplicationIdReviewBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorOnboardingAdminApplicationsApplicationIdReview>>,
        TError,
        {applicationId: string;data: PostVendorOnboardingAdminApplicationsApplicationIdReviewBody},
        TContext
      > => {

      const mutationOptions = getPostVendorOnboardingAdminApplicationsApplicationIdReviewMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVendorOnboardingAdminApplicationsApplicationId = (
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorOnboardingAdminApplicationsApplicationId200>> => {
    
    
    return axios.get(
      `http://localhost:4000/vendor-onboarding/admin/applications/${applicationId}`,options
    );
  }


export const getGetVendorOnboardingAdminApplicationsApplicationIdQueryKey = (applicationId: string,) => {
    return [`http://localhost:4000/vendor-onboarding/admin/applications/${applicationId}`] as const;
    }

    
export const getGetVendorOnboardingAdminApplicationsApplicationIdQueryOptions = <TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError = AxiosError<void>>(applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorOnboardingAdminApplicationsApplicationIdQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>> = ({ signal }) => getVendorOnboardingAdminApplicationsApplicationId(applicationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorOnboardingAdminApplicationsApplicationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>>
export type GetVendorOnboardingAdminApplicationsApplicationIdQueryError = AxiosError<void>


export function useGetVendorOnboardingAdminApplicationsApplicationId<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError = AxiosError<void>>(
 applicationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>,
          TError,
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOnboardingAdminApplicationsApplicationId<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError = AxiosError<void>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>,
          TError,
          Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOnboardingAdminApplicationsApplicationId<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError = AxiosError<void>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorOnboardingAdminApplicationsApplicationId<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError = AxiosError<void>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminApplicationsApplicationId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorOnboardingAdminApplicationsApplicationIdQueryOptions(applicationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putVendorOnboardingAdminApplicationsApplicationIdStatus = (
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutVendorOnboardingAdminApplicationsApplicationIdStatus200>> => {
    
    
    return axios.put(
      `http://localhost:4000/vendor-onboarding/admin/applications/${applicationId}/status`,undefined,options
    );
  }



export const getPutVendorOnboardingAdminApplicationsApplicationIdStatusMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorOnboardingAdminApplicationsApplicationIdStatus>>, TError,{applicationId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putVendorOnboardingAdminApplicationsApplicationIdStatus>>, TError,{applicationId: string}, TContext> => {

const mutationKey = ['putVendorOnboardingAdminApplicationsApplicationIdStatus'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVendorOnboardingAdminApplicationsApplicationIdStatus>>, {applicationId: string}> = (props) => {
          const {applicationId} = props ?? {};

          return  putVendorOnboardingAdminApplicationsApplicationIdStatus(applicationId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVendorOnboardingAdminApplicationsApplicationIdStatusMutationResult = NonNullable<Awaited<ReturnType<typeof putVendorOnboardingAdminApplicationsApplicationIdStatus>>>
    
    export type PutVendorOnboardingAdminApplicationsApplicationIdStatusMutationError = AxiosError<void>

    export const usePutVendorOnboardingAdminApplicationsApplicationIdStatus = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorOnboardingAdminApplicationsApplicationIdStatus>>, TError,{applicationId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putVendorOnboardingAdminApplicationsApplicationIdStatus>>,
        TError,
        {applicationId: string},
        TContext
      > => {

      const mutationOptions = getPutVendorOnboardingAdminApplicationsApplicationIdStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postVendorOnboardingAdminDocumentsDocumentIdVerify = (
    documentId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorOnboardingAdminDocumentsDocumentIdVerify200>> => {
    
    
    return axios.post(
      `http://localhost:4000/vendor-onboarding/admin/documents/${documentId}/verify`,undefined,options
    );
  }



export const getPostVendorOnboardingAdminDocumentsDocumentIdVerifyMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminDocumentsDocumentIdVerify>>, TError,{documentId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminDocumentsDocumentIdVerify>>, TError,{documentId: string}, TContext> => {

const mutationKey = ['postVendorOnboardingAdminDocumentsDocumentIdVerify'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorOnboardingAdminDocumentsDocumentIdVerify>>, {documentId: string}> = (props) => {
          const {documentId} = props ?? {};

          return  postVendorOnboardingAdminDocumentsDocumentIdVerify(documentId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorOnboardingAdminDocumentsDocumentIdVerifyMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorOnboardingAdminDocumentsDocumentIdVerify>>>
    
    export type PostVendorOnboardingAdminDocumentsDocumentIdVerifyMutationError = AxiosError<void>

    export const usePostVendorOnboardingAdminDocumentsDocumentIdVerify = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminDocumentsDocumentIdVerify>>, TError,{documentId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorOnboardingAdminDocumentsDocumentIdVerify>>,
        TError,
        {documentId: string},
        TContext
      > => {

      const mutationOptions = getPostVendorOnboardingAdminDocumentsDocumentIdVerifyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVendorOnboardingAdminDashboard = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorOnboardingAdminDashboard200>> => {
    
    
    return axios.get(
      `http://localhost:4000/vendor-onboarding/admin/dashboard`,options
    );
  }


export const getGetVendorOnboardingAdminDashboardQueryKey = () => {
    return [`http://localhost:4000/vendor-onboarding/admin/dashboard`] as const;
    }

    
export const getGetVendorOnboardingAdminDashboardQueryOptions = <TData = Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorOnboardingAdminDashboardQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>> = ({ signal }) => getVendorOnboardingAdminDashboard({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorOnboardingAdminDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>>
export type GetVendorOnboardingAdminDashboardQueryError = AxiosError<void>


export function useGetVendorOnboardingAdminDashboard<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>,
          TError,
          Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOnboardingAdminDashboard<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>,
          TError,
          Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOnboardingAdminDashboard<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorOnboardingAdminDashboard<TData = Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOnboardingAdminDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorOnboardingAdminDashboardQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postVendorOnboardingAdminCleanupOrphaned = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorOnboardingAdminCleanupOrphaned200>> => {
    
    
    return axios.post(
      `http://localhost:4000/vendor-onboarding/admin/cleanup/orphaned`,undefined,options
    );
  }



export const getPostVendorOnboardingAdminCleanupOrphanedMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminCleanupOrphaned>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminCleanupOrphaned>>, TError,void, TContext> => {

const mutationKey = ['postVendorOnboardingAdminCleanupOrphaned'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorOnboardingAdminCleanupOrphaned>>, void> = () => {
          

          return  postVendorOnboardingAdminCleanupOrphaned(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorOnboardingAdminCleanupOrphanedMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorOnboardingAdminCleanupOrphaned>>>
    
    export type PostVendorOnboardingAdminCleanupOrphanedMutationError = AxiosError<void>

    export const usePostVendorOnboardingAdminCleanupOrphaned = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOnboardingAdminCleanupOrphaned>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorOnboardingAdminCleanupOrphaned>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostVendorOnboardingAdminCleanupOrphanedMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteVendorOnboardingAdminApplicationsApplicationIdCleanup = (
    applicationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteVendorOnboardingAdminApplicationsApplicationIdCleanup200>> => {
    
    
    return axios.delete(
      `http://localhost:4000/vendor-onboarding/admin/applications/${applicationId}/cleanup`,options
    );
  }



export const getDeleteVendorOnboardingAdminApplicationsApplicationIdCleanupMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVendorOnboardingAdminApplicationsApplicationIdCleanup>>, TError,{applicationId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVendorOnboardingAdminApplicationsApplicationIdCleanup>>, TError,{applicationId: string}, TContext> => {

const mutationKey = ['deleteVendorOnboardingAdminApplicationsApplicationIdCleanup'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVendorOnboardingAdminApplicationsApplicationIdCleanup>>, {applicationId: string}> = (props) => {
          const {applicationId} = props ?? {};

          return  deleteVendorOnboardingAdminApplicationsApplicationIdCleanup(applicationId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVendorOnboardingAdminApplicationsApplicationIdCleanupMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVendorOnboardingAdminApplicationsApplicationIdCleanup>>>
    
    export type DeleteVendorOnboardingAdminApplicationsApplicationIdCleanupMutationError = AxiosError<void>

    export const useDeleteVendorOnboardingAdminApplicationsApplicationIdCleanup = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVendorOnboardingAdminApplicationsApplicationIdCleanup>>, TError,{applicationId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteVendorOnboardingAdminApplicationsApplicationIdCleanup>>,
        TError,
        {applicationId: string},
        TContext
      > => {

      const mutationOptions = getDeleteVendorOnboardingAdminApplicationsApplicationIdCleanupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    