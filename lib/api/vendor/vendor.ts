/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteVendorProductsProductIdImagesImageId401,
  DeleteVendorProductsProductIdImagesImageId403,
  DeleteVendorProductsProductIdImagesImageId404,
  GetVendorAnalytics200,
  GetVendorAnalytics401,
  GetVendorAnalyticsParams,
  GetVendorDashboard200,
  GetVendorDashboard401,
  GetVendorDashboard404,
  GetVendorMetrics200,
  GetVendorMetricsParams,
  GetVendorOrdersOrderIdTracking200,
  GetVendorOrdersOrderIdTracking401,
  GetVendorOrdersOrderIdTracking403,
  GetVendorPaymentEarnings200,
  GetVendorPaymentEarnings401,
  GetVendorPaymentEarningsParams,
  GetVendorPaymentPayoutsHistory200,
  GetVendorPaymentPayoutsHistory401,
  GetVendorPaymentPayoutsHistoryParams,
  GetVendorPerformance200,
  GetVendorPerformance401,
  GetVendorPerformanceParams,
  GetVendorProducts200,
  GetVendorProducts401,
  GetVendorProducts404,
  GetVendorProductsBestSellers200,
  GetVendorProductsBestSellers401,
  GetVendorProductsBestSellers404,
  GetVendorProductsProductIdImages200Item,
  GetVendorProductsProductIdImages401,
  GetVendorProductsProductIdImages403,
  GetVendorProductsStats200,
  GetVendorStore200,
  PostVendorOrdersOrderIdDelivered200,
  PostVendorOrdersOrderIdDelivered401,
  PostVendorOrdersOrderIdDelivered403,
  PostVendorOrdersOrderIdOutForDelivery200,
  PostVendorOrdersOrderIdOutForDelivery401,
  PostVendorOrdersOrderIdOutForDelivery403,
  PostVendorOrdersOrderIdPickedUp200,
  PostVendorOrdersOrderIdPickedUp401,
  PostVendorOrdersOrderIdPickedUp403,
  PostVendorOrdersOrderIdPickedUpBody,
  PostVendorPaymentAccount200,
  PostVendorPaymentAccount400,
  PostVendorPaymentAccount401,
  PostVendorPaymentAccount403,
  PostVendorPaymentAccountBody,
  PostVendorProductsProductIdImages201,
  PostVendorProductsProductIdImages401,
  PostVendorProductsProductIdImages403,
  PostVendorProductsProductIdImages404,
  PostVendorProductsProductIdImagesBodyItem,
  PutVendorOrdersOrderIdTracking200,
  PutVendorOrdersOrderIdTracking401,
  PutVendorOrdersOrderIdTracking403,
  PutVendorOrdersOrderIdTrackingBody,
  PutVendorProductsProductIdImagesImageId200,
  PutVendorProductsProductIdImagesImageId401,
  PutVendorProductsProductIdImagesImageId403,
  PutVendorProductsProductIdImagesImageId404,
  PutVendorProductsProductIdImagesImageIdBody,
  PutVendorProductsProductIdImagesReorder200,
  PutVendorProductsProductIdImagesReorder400,
  PutVendorProductsProductIdImagesReorder401,
  PutVendorProductsProductIdImagesReorder403,
  PutVendorProductsProductIdImagesReorder404,
  PutVendorProductsProductIdImagesReorderBody,
  PutVendorStore200,
  PutVendorStore400,
  PutVendorStore409,
  PutVendorStoreBody
} from '../marketplaceAPI.schemas';





export const getVendorDashboard = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorDashboard200>> => {
    
    
    return axios.get(
      `/vendor/dashboard`,options
    );
  }


export const getGetVendorDashboardQueryKey = () => {
    return [`/vendor/dashboard`] as const;
    }

    
export const getGetVendorDashboardQueryOptions = <TData = Awaited<ReturnType<typeof getVendorDashboard>>, TError = AxiosError<GetVendorDashboard401 | GetVendorDashboard404>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorDashboardQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorDashboard>>> = ({ signal }) => getVendorDashboard({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorDashboard>>>
export type GetVendorDashboardQueryError = AxiosError<GetVendorDashboard401 | GetVendorDashboard404>


export function useGetVendorDashboard<TData = Awaited<ReturnType<typeof getVendorDashboard>>, TError = AxiosError<GetVendorDashboard401 | GetVendorDashboard404>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorDashboard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorDashboard>>,
          TError,
          Awaited<ReturnType<typeof getVendorDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorDashboard<TData = Awaited<ReturnType<typeof getVendorDashboard>>, TError = AxiosError<GetVendorDashboard401 | GetVendorDashboard404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorDashboard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorDashboard>>,
          TError,
          Awaited<ReturnType<typeof getVendorDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorDashboard<TData = Awaited<ReturnType<typeof getVendorDashboard>>, TError = AxiosError<GetVendorDashboard401 | GetVendorDashboard404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorDashboard<TData = Awaited<ReturnType<typeof getVendorDashboard>>, TError = AxiosError<GetVendorDashboard401 | GetVendorDashboard404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorDashboardQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorProductsStats = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorProductsStats200>> => {
    
    
    return axios.get(
      `/vendor/products/stats`,options
    );
  }


export const getGetVendorProductsStatsQueryKey = () => {
    return [`/vendor/products/stats`] as const;
    }

    
export const getGetVendorProductsStatsQueryOptions = <TData = Awaited<ReturnType<typeof getVendorProductsStats>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsStats>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorProductsStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorProductsStats>>> = ({ signal }) => getVendorProductsStats({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorProductsStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorProductsStats>>>
export type GetVendorProductsStatsQueryError = AxiosError<unknown>


export function useGetVendorProductsStats<TData = Awaited<ReturnType<typeof getVendorProductsStats>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProductsStats>>,
          TError,
          Awaited<ReturnType<typeof getVendorProductsStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProductsStats<TData = Awaited<ReturnType<typeof getVendorProductsStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProductsStats>>,
          TError,
          Awaited<ReturnType<typeof getVendorProductsStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProductsStats<TData = Awaited<ReturnType<typeof getVendorProductsStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorProductsStats<TData = Awaited<ReturnType<typeof getVendorProductsStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorProductsStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorStore = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorStore200>> => {
    
    
    return axios.get(
      `/vendor/store`,options
    );
  }


export const getGetVendorStoreQueryKey = () => {
    return [`/vendor/store`] as const;
    }

    
export const getGetVendorStoreQueryOptions = <TData = Awaited<ReturnType<typeof getVendorStore>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorStore>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorStoreQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorStore>>> = ({ signal }) => getVendorStore({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorStore>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorStoreQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorStore>>>
export type GetVendorStoreQueryError = AxiosError<unknown>


export function useGetVendorStore<TData = Awaited<ReturnType<typeof getVendorStore>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorStore>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorStore>>,
          TError,
          Awaited<ReturnType<typeof getVendorStore>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorStore<TData = Awaited<ReturnType<typeof getVendorStore>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorStore>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorStore>>,
          TError,
          Awaited<ReturnType<typeof getVendorStore>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorStore<TData = Awaited<ReturnType<typeof getVendorStore>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorStore>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorStore<TData = Awaited<ReturnType<typeof getVendorStore>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorStore>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorStoreQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putVendorStore = (
    putVendorStoreBody: PutVendorStoreBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutVendorStore200>> => {
    
    
    return axios.put(
      `/vendor/store`,
      putVendorStoreBody,options
    );
  }



export const getPutVendorStoreMutationOptions = <TError = AxiosError<PutVendorStore400 | PutVendorStore409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorStore>>, TError,{data: PutVendorStoreBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putVendorStore>>, TError,{data: PutVendorStoreBody}, TContext> => {

const mutationKey = ['putVendorStore'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVendorStore>>, {data: PutVendorStoreBody}> = (props) => {
          const {data} = props ?? {};

          return  putVendorStore(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVendorStoreMutationResult = NonNullable<Awaited<ReturnType<typeof putVendorStore>>>
    export type PutVendorStoreMutationBody = PutVendorStoreBody
    export type PutVendorStoreMutationError = AxiosError<PutVendorStore400 | PutVendorStore409>

    export const usePutVendorStore = <TError = AxiosError<PutVendorStore400 | PutVendorStore409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorStore>>, TError,{data: PutVendorStoreBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putVendorStore>>,
        TError,
        {data: PutVendorStoreBody},
        TContext
      > => {

      const mutationOptions = getPutVendorStoreMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVendorProducts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorProducts200>> => {
    
    
    return axios.get(
      `/vendor/products`,options
    );
  }


export const getGetVendorProductsQueryKey = () => {
    return [`/vendor/products`] as const;
    }

    
export const getGetVendorProductsQueryOptions = <TData = Awaited<ReturnType<typeof getVendorProducts>>, TError = AxiosError<GetVendorProducts401 | GetVendorProducts404>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorProductsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorProducts>>> = ({ signal }) => getVendorProducts({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorProducts>>>
export type GetVendorProductsQueryError = AxiosError<GetVendorProducts401 | GetVendorProducts404>


export function useGetVendorProducts<TData = Awaited<ReturnType<typeof getVendorProducts>>, TError = AxiosError<GetVendorProducts401 | GetVendorProducts404>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProducts>>,
          TError,
          Awaited<ReturnType<typeof getVendorProducts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProducts<TData = Awaited<ReturnType<typeof getVendorProducts>>, TError = AxiosError<GetVendorProducts401 | GetVendorProducts404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProducts>>,
          TError,
          Awaited<ReturnType<typeof getVendorProducts>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProducts<TData = Awaited<ReturnType<typeof getVendorProducts>>, TError = AxiosError<GetVendorProducts401 | GetVendorProducts404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorProducts<TData = Awaited<ReturnType<typeof getVendorProducts>>, TError = AxiosError<GetVendorProducts401 | GetVendorProducts404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProducts>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorProductsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorProductsBestSellers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorProductsBestSellers200>> => {
    
    
    return axios.get(
      `/vendor/products/best-sellers`,options
    );
  }


export const getGetVendorProductsBestSellersQueryKey = () => {
    return [`/vendor/products/best-sellers`] as const;
    }

    
export const getGetVendorProductsBestSellersQueryOptions = <TData = Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError = AxiosError<GetVendorProductsBestSellers401 | GetVendorProductsBestSellers404>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorProductsBestSellersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorProductsBestSellers>>> = ({ signal }) => getVendorProductsBestSellers({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorProductsBestSellersQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorProductsBestSellers>>>
export type GetVendorProductsBestSellersQueryError = AxiosError<GetVendorProductsBestSellers401 | GetVendorProductsBestSellers404>


export function useGetVendorProductsBestSellers<TData = Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError = AxiosError<GetVendorProductsBestSellers401 | GetVendorProductsBestSellers404>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProductsBestSellers>>,
          TError,
          Awaited<ReturnType<typeof getVendorProductsBestSellers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProductsBestSellers<TData = Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError = AxiosError<GetVendorProductsBestSellers401 | GetVendorProductsBestSellers404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProductsBestSellers>>,
          TError,
          Awaited<ReturnType<typeof getVendorProductsBestSellers>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProductsBestSellers<TData = Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError = AxiosError<GetVendorProductsBestSellers401 | GetVendorProductsBestSellers404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorProductsBestSellers<TData = Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError = AxiosError<GetVendorProductsBestSellers401 | GetVendorProductsBestSellers404>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsBestSellers>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorProductsBestSellersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorAnalytics = (
    params?: GetVendorAnalyticsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorAnalytics200>> => {
    
    
    return axios.get(
      `/vendor/analytics`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorAnalyticsQueryKey = (params?: GetVendorAnalyticsParams,) => {
    return [`/vendor/analytics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorAnalyticsQueryOptions = <TData = Awaited<ReturnType<typeof getVendorAnalytics>>, TError = AxiosError<GetVendorAnalytics401>>(params?: GetVendorAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorAnalyticsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorAnalytics>>> = ({ signal }) => getVendorAnalytics(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorAnalytics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorAnalyticsQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorAnalytics>>>
export type GetVendorAnalyticsQueryError = AxiosError<GetVendorAnalytics401>


export function useGetVendorAnalytics<TData = Awaited<ReturnType<typeof getVendorAnalytics>>, TError = AxiosError<GetVendorAnalytics401>>(
 params: undefined |  GetVendorAnalyticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorAnalytics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getVendorAnalytics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorAnalytics<TData = Awaited<ReturnType<typeof getVendorAnalytics>>, TError = AxiosError<GetVendorAnalytics401>>(
 params?: GetVendorAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorAnalytics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorAnalytics>>,
          TError,
          Awaited<ReturnType<typeof getVendorAnalytics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorAnalytics<TData = Awaited<ReturnType<typeof getVendorAnalytics>>, TError = AxiosError<GetVendorAnalytics401>>(
 params?: GetVendorAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorAnalytics<TData = Awaited<ReturnType<typeof getVendorAnalytics>>, TError = AxiosError<GetVendorAnalytics401>>(
 params?: GetVendorAnalyticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorAnalytics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorAnalyticsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorPerformance = (
    params?: GetVendorPerformanceParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorPerformance200>> => {
    
    
    return axios.get(
      `/vendor/performance`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorPerformanceQueryKey = (params?: GetVendorPerformanceParams,) => {
    return [`/vendor/performance`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorPerformanceQueryOptions = <TData = Awaited<ReturnType<typeof getVendorPerformance>>, TError = AxiosError<GetVendorPerformance401>>(params?: GetVendorPerformanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPerformance>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorPerformanceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorPerformance>>> = ({ signal }) => getVendorPerformance(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorPerformance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorPerformanceQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorPerformance>>>
export type GetVendorPerformanceQueryError = AxiosError<GetVendorPerformance401>


export function useGetVendorPerformance<TData = Awaited<ReturnType<typeof getVendorPerformance>>, TError = AxiosError<GetVendorPerformance401>>(
 params: undefined |  GetVendorPerformanceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPerformance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorPerformance>>,
          TError,
          Awaited<ReturnType<typeof getVendorPerformance>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorPerformance<TData = Awaited<ReturnType<typeof getVendorPerformance>>, TError = AxiosError<GetVendorPerformance401>>(
 params?: GetVendorPerformanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPerformance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorPerformance>>,
          TError,
          Awaited<ReturnType<typeof getVendorPerformance>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorPerformance<TData = Awaited<ReturnType<typeof getVendorPerformance>>, TError = AxiosError<GetVendorPerformance401>>(
 params?: GetVendorPerformanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPerformance>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorPerformance<TData = Awaited<ReturnType<typeof getVendorPerformance>>, TError = AxiosError<GetVendorPerformance401>>(
 params?: GetVendorPerformanceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPerformance>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorPerformanceQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putVendorOrdersOrderIdTracking = (
    orderId: string,
    putVendorOrdersOrderIdTrackingBody: PutVendorOrdersOrderIdTrackingBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutVendorOrdersOrderIdTracking200>> => {
    
    
    return axios.put(
      `/vendor/orders/${orderId}/tracking`,
      putVendorOrdersOrderIdTrackingBody,options
    );
  }



export const getPutVendorOrdersOrderIdTrackingMutationOptions = <TError = AxiosError<PutVendorOrdersOrderIdTracking401 | PutVendorOrdersOrderIdTracking403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorOrdersOrderIdTracking>>, TError,{orderId: string;data: PutVendorOrdersOrderIdTrackingBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putVendorOrdersOrderIdTracking>>, TError,{orderId: string;data: PutVendorOrdersOrderIdTrackingBody}, TContext> => {

const mutationKey = ['putVendorOrdersOrderIdTracking'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVendorOrdersOrderIdTracking>>, {orderId: string;data: PutVendorOrdersOrderIdTrackingBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  putVendorOrdersOrderIdTracking(orderId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVendorOrdersOrderIdTrackingMutationResult = NonNullable<Awaited<ReturnType<typeof putVendorOrdersOrderIdTracking>>>
    export type PutVendorOrdersOrderIdTrackingMutationBody = PutVendorOrdersOrderIdTrackingBody
    export type PutVendorOrdersOrderIdTrackingMutationError = AxiosError<PutVendorOrdersOrderIdTracking401 | PutVendorOrdersOrderIdTracking403>

    export const usePutVendorOrdersOrderIdTracking = <TError = AxiosError<PutVendorOrdersOrderIdTracking401 | PutVendorOrdersOrderIdTracking403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorOrdersOrderIdTracking>>, TError,{orderId: string;data: PutVendorOrdersOrderIdTrackingBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putVendorOrdersOrderIdTracking>>,
        TError,
        {orderId: string;data: PutVendorOrdersOrderIdTrackingBody},
        TContext
      > => {

      const mutationOptions = getPutVendorOrdersOrderIdTrackingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVendorOrdersOrderIdTracking = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorOrdersOrderIdTracking200>> => {
    
    
    return axios.get(
      `/vendor/orders/${orderId}/tracking`,options
    );
  }


export const getGetVendorOrdersOrderIdTrackingQueryKey = (orderId: string,) => {
    return [`/vendor/orders/${orderId}/tracking`] as const;
    }

    
export const getGetVendorOrdersOrderIdTrackingQueryOptions = <TData = Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError = AxiosError<GetVendorOrdersOrderIdTracking401 | GetVendorOrdersOrderIdTracking403>>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorOrdersOrderIdTrackingQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>> = ({ signal }) => getVendorOrdersOrderIdTracking(orderId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorOrdersOrderIdTrackingQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>>
export type GetVendorOrdersOrderIdTrackingQueryError = AxiosError<GetVendorOrdersOrderIdTracking401 | GetVendorOrdersOrderIdTracking403>


export function useGetVendorOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError = AxiosError<GetVendorOrdersOrderIdTracking401 | GetVendorOrdersOrderIdTracking403>>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError = AxiosError<GetVendorOrdersOrderIdTracking401 | GetVendorOrdersOrderIdTracking403>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>,
          TError,
          Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError = AxiosError<GetVendorOrdersOrderIdTracking401 | GetVendorOrdersOrderIdTracking403>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorOrdersOrderIdTracking<TData = Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError = AxiosError<GetVendorOrdersOrderIdTracking401 | GetVendorOrdersOrderIdTracking403>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorOrdersOrderIdTracking>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorOrdersOrderIdTrackingQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postVendorOrdersOrderIdPickedUp = (
    orderId: string,
    postVendorOrdersOrderIdPickedUpBody: PostVendorOrdersOrderIdPickedUpBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorOrdersOrderIdPickedUp200>> => {
    
    
    return axios.post(
      `/vendor/orders/${orderId}/picked-up`,
      postVendorOrdersOrderIdPickedUpBody,options
    );
  }



export const getPostVendorOrdersOrderIdPickedUpMutationOptions = <TError = AxiosError<PostVendorOrdersOrderIdPickedUp401 | PostVendorOrdersOrderIdPickedUp403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdPickedUp>>, TError,{orderId: string;data: PostVendorOrdersOrderIdPickedUpBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdPickedUp>>, TError,{orderId: string;data: PostVendorOrdersOrderIdPickedUpBody}, TContext> => {

const mutationKey = ['postVendorOrdersOrderIdPickedUp'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorOrdersOrderIdPickedUp>>, {orderId: string;data: PostVendorOrdersOrderIdPickedUpBody}> = (props) => {
          const {orderId,data} = props ?? {};

          return  postVendorOrdersOrderIdPickedUp(orderId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorOrdersOrderIdPickedUpMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorOrdersOrderIdPickedUp>>>
    export type PostVendorOrdersOrderIdPickedUpMutationBody = PostVendorOrdersOrderIdPickedUpBody
    export type PostVendorOrdersOrderIdPickedUpMutationError = AxiosError<PostVendorOrdersOrderIdPickedUp401 | PostVendorOrdersOrderIdPickedUp403>

    export const usePostVendorOrdersOrderIdPickedUp = <TError = AxiosError<PostVendorOrdersOrderIdPickedUp401 | PostVendorOrdersOrderIdPickedUp403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdPickedUp>>, TError,{orderId: string;data: PostVendorOrdersOrderIdPickedUpBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorOrdersOrderIdPickedUp>>,
        TError,
        {orderId: string;data: PostVendorOrdersOrderIdPickedUpBody},
        TContext
      > => {

      const mutationOptions = getPostVendorOrdersOrderIdPickedUpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postVendorOrdersOrderIdOutForDelivery = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorOrdersOrderIdOutForDelivery200>> => {
    
    
    return axios.post(
      `/vendor/orders/${orderId}/out-for-delivery`,undefined,options
    );
  }



export const getPostVendorOrdersOrderIdOutForDeliveryMutationOptions = <TError = AxiosError<PostVendorOrdersOrderIdOutForDelivery401 | PostVendorOrdersOrderIdOutForDelivery403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdOutForDelivery>>, TError,{orderId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdOutForDelivery>>, TError,{orderId: string}, TContext> => {

const mutationKey = ['postVendorOrdersOrderIdOutForDelivery'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorOrdersOrderIdOutForDelivery>>, {orderId: string}> = (props) => {
          const {orderId} = props ?? {};

          return  postVendorOrdersOrderIdOutForDelivery(orderId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorOrdersOrderIdOutForDeliveryMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorOrdersOrderIdOutForDelivery>>>
    
    export type PostVendorOrdersOrderIdOutForDeliveryMutationError = AxiosError<PostVendorOrdersOrderIdOutForDelivery401 | PostVendorOrdersOrderIdOutForDelivery403>

    export const usePostVendorOrdersOrderIdOutForDelivery = <TError = AxiosError<PostVendorOrdersOrderIdOutForDelivery401 | PostVendorOrdersOrderIdOutForDelivery403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdOutForDelivery>>, TError,{orderId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorOrdersOrderIdOutForDelivery>>,
        TError,
        {orderId: string},
        TContext
      > => {

      const mutationOptions = getPostVendorOrdersOrderIdOutForDeliveryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postVendorOrdersOrderIdDelivered = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorOrdersOrderIdDelivered200>> => {
    
    
    return axios.post(
      `/vendor/orders/${orderId}/delivered`,undefined,options
    );
  }



export const getPostVendorOrdersOrderIdDeliveredMutationOptions = <TError = AxiosError<PostVendorOrdersOrderIdDelivered401 | PostVendorOrdersOrderIdDelivered403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdDelivered>>, TError,{orderId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdDelivered>>, TError,{orderId: string}, TContext> => {

const mutationKey = ['postVendorOrdersOrderIdDelivered'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorOrdersOrderIdDelivered>>, {orderId: string}> = (props) => {
          const {orderId} = props ?? {};

          return  postVendorOrdersOrderIdDelivered(orderId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorOrdersOrderIdDeliveredMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorOrdersOrderIdDelivered>>>
    
    export type PostVendorOrdersOrderIdDeliveredMutationError = AxiosError<PostVendorOrdersOrderIdDelivered401 | PostVendorOrdersOrderIdDelivered403>

    export const usePostVendorOrdersOrderIdDelivered = <TError = AxiosError<PostVendorOrdersOrderIdDelivered401 | PostVendorOrdersOrderIdDelivered403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorOrdersOrderIdDelivered>>, TError,{orderId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorOrdersOrderIdDelivered>>,
        TError,
        {orderId: string},
        TContext
      > => {

      const mutationOptions = getPostVendorOrdersOrderIdDeliveredMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postVendorPaymentAccount = (
    postVendorPaymentAccountBody: PostVendorPaymentAccountBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorPaymentAccount200>> => {
    
    
    return axios.post(
      `/vendor/payment/account`,
      postVendorPaymentAccountBody,options
    );
  }



export const getPostVendorPaymentAccountMutationOptions = <TError = AxiosError<PostVendorPaymentAccount400 | PostVendorPaymentAccount401 | PostVendorPaymentAccount403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorPaymentAccount>>, TError,{data: PostVendorPaymentAccountBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorPaymentAccount>>, TError,{data: PostVendorPaymentAccountBody}, TContext> => {

const mutationKey = ['postVendorPaymentAccount'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorPaymentAccount>>, {data: PostVendorPaymentAccountBody}> = (props) => {
          const {data} = props ?? {};

          return  postVendorPaymentAccount(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorPaymentAccountMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorPaymentAccount>>>
    export type PostVendorPaymentAccountMutationBody = PostVendorPaymentAccountBody
    export type PostVendorPaymentAccountMutationError = AxiosError<PostVendorPaymentAccount400 | PostVendorPaymentAccount401 | PostVendorPaymentAccount403>

    export const usePostVendorPaymentAccount = <TError = AxiosError<PostVendorPaymentAccount400 | PostVendorPaymentAccount401 | PostVendorPaymentAccount403>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorPaymentAccount>>, TError,{data: PostVendorPaymentAccountBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorPaymentAccount>>,
        TError,
        {data: PostVendorPaymentAccountBody},
        TContext
      > => {

      const mutationOptions = getPostVendorPaymentAccountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVendorPaymentEarnings = (
    params?: GetVendorPaymentEarningsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorPaymentEarnings200>> => {
    
    
    return axios.get(
      `/vendor/payment/earnings`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorPaymentEarningsQueryKey = (params?: GetVendorPaymentEarningsParams,) => {
    return [`/vendor/payment/earnings`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorPaymentEarningsQueryOptions = <TData = Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError = AxiosError<GetVendorPaymentEarnings401>>(params?: GetVendorPaymentEarningsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorPaymentEarningsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorPaymentEarnings>>> = ({ signal }) => getVendorPaymentEarnings(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorPaymentEarningsQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorPaymentEarnings>>>
export type GetVendorPaymentEarningsQueryError = AxiosError<GetVendorPaymentEarnings401>


export function useGetVendorPaymentEarnings<TData = Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError = AxiosError<GetVendorPaymentEarnings401>>(
 params: undefined |  GetVendorPaymentEarningsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorPaymentEarnings>>,
          TError,
          Awaited<ReturnType<typeof getVendorPaymentEarnings>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorPaymentEarnings<TData = Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError = AxiosError<GetVendorPaymentEarnings401>>(
 params?: GetVendorPaymentEarningsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorPaymentEarnings>>,
          TError,
          Awaited<ReturnType<typeof getVendorPaymentEarnings>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorPaymentEarnings<TData = Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError = AxiosError<GetVendorPaymentEarnings401>>(
 params?: GetVendorPaymentEarningsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorPaymentEarnings<TData = Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError = AxiosError<GetVendorPaymentEarnings401>>(
 params?: GetVendorPaymentEarningsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentEarnings>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorPaymentEarningsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorPaymentPayoutsHistory = (
    params?: GetVendorPaymentPayoutsHistoryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorPaymentPayoutsHistory200>> => {
    
    
    return axios.get(
      `/vendor/payment/payouts/history`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorPaymentPayoutsHistoryQueryKey = (params?: GetVendorPaymentPayoutsHistoryParams,) => {
    return [`/vendor/payment/payouts/history`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorPaymentPayoutsHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError = AxiosError<GetVendorPaymentPayoutsHistory401>>(params?: GetVendorPaymentPayoutsHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorPaymentPayoutsHistoryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>> = ({ signal }) => getVendorPaymentPayoutsHistory(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorPaymentPayoutsHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>>
export type GetVendorPaymentPayoutsHistoryQueryError = AxiosError<GetVendorPaymentPayoutsHistory401>


export function useGetVendorPaymentPayoutsHistory<TData = Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError = AxiosError<GetVendorPaymentPayoutsHistory401>>(
 params: undefined |  GetVendorPaymentPayoutsHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>,
          TError,
          Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorPaymentPayoutsHistory<TData = Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError = AxiosError<GetVendorPaymentPayoutsHistory401>>(
 params?: GetVendorPaymentPayoutsHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>,
          TError,
          Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorPaymentPayoutsHistory<TData = Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError = AxiosError<GetVendorPaymentPayoutsHistory401>>(
 params?: GetVendorPaymentPayoutsHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorPaymentPayoutsHistory<TData = Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError = AxiosError<GetVendorPaymentPayoutsHistory401>>(
 params?: GetVendorPaymentPayoutsHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorPaymentPayoutsHistory>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorPaymentPayoutsHistoryQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVendorMetrics = (
    params?: GetVendorMetricsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorMetrics200>> => {
    
    
    return axios.get(
      `/vendor/metrics`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVendorMetricsQueryKey = (params?: GetVendorMetricsParams,) => {
    return [`/vendor/metrics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVendorMetricsQueryOptions = <TData = Awaited<ReturnType<typeof getVendorMetrics>>, TError = AxiosError<unknown>>(params?: GetVendorMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorMetrics>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorMetricsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorMetrics>>> = ({ signal }) => getVendorMetrics(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorMetrics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorMetrics>>>
export type GetVendorMetricsQueryError = AxiosError<unknown>


export function useGetVendorMetrics<TData = Awaited<ReturnType<typeof getVendorMetrics>>, TError = AxiosError<unknown>>(
 params: undefined |  GetVendorMetricsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorMetrics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorMetrics>>,
          TError,
          Awaited<ReturnType<typeof getVendorMetrics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorMetrics<TData = Awaited<ReturnType<typeof getVendorMetrics>>, TError = AxiosError<unknown>>(
 params?: GetVendorMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorMetrics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorMetrics>>,
          TError,
          Awaited<ReturnType<typeof getVendorMetrics>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorMetrics<TData = Awaited<ReturnType<typeof getVendorMetrics>>, TError = AxiosError<unknown>>(
 params?: GetVendorMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorMetrics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorMetrics<TData = Awaited<ReturnType<typeof getVendorMetrics>>, TError = AxiosError<unknown>>(
 params?: GetVendorMetricsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorMetrics>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorMetricsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postVendorProductsProductIdImages = (
    productId: string,
    postVendorProductsProductIdImagesBodyItem: PostVendorProductsProductIdImagesBodyItem[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVendorProductsProductIdImages201>> => {
    
    
    return axios.post(
      `/vendor/products/${productId}/images`,
      postVendorProductsProductIdImagesBodyItem,options
    );
  }



export const getPostVendorProductsProductIdImagesMutationOptions = <TError = AxiosError<PostVendorProductsProductIdImages401 | PostVendorProductsProductIdImages403 | PostVendorProductsProductIdImages404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorProductsProductIdImages>>, TError,{productId: string;data: PostVendorProductsProductIdImagesBodyItem[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVendorProductsProductIdImages>>, TError,{productId: string;data: PostVendorProductsProductIdImagesBodyItem[]}, TContext> => {

const mutationKey = ['postVendorProductsProductIdImages'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVendorProductsProductIdImages>>, {productId: string;data: PostVendorProductsProductIdImagesBodyItem[]}> = (props) => {
          const {productId,data} = props ?? {};

          return  postVendorProductsProductIdImages(productId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVendorProductsProductIdImagesMutationResult = NonNullable<Awaited<ReturnType<typeof postVendorProductsProductIdImages>>>
    export type PostVendorProductsProductIdImagesMutationBody = PostVendorProductsProductIdImagesBodyItem[]
    export type PostVendorProductsProductIdImagesMutationError = AxiosError<PostVendorProductsProductIdImages401 | PostVendorProductsProductIdImages403 | PostVendorProductsProductIdImages404>

    export const usePostVendorProductsProductIdImages = <TError = AxiosError<PostVendorProductsProductIdImages401 | PostVendorProductsProductIdImages403 | PostVendorProductsProductIdImages404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVendorProductsProductIdImages>>, TError,{productId: string;data: PostVendorProductsProductIdImagesBodyItem[]}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVendorProductsProductIdImages>>,
        TError,
        {productId: string;data: PostVendorProductsProductIdImagesBodyItem[]},
        TContext
      > => {

      const mutationOptions = getPostVendorProductsProductIdImagesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVendorProductsProductIdImages = (
    productId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVendorProductsProductIdImages200Item[]>> => {
    
    
    return axios.get(
      `/vendor/products/${productId}/images`,options
    );
  }


export const getGetVendorProductsProductIdImagesQueryKey = (productId: string,) => {
    return [`/vendor/products/${productId}/images`] as const;
    }

    
export const getGetVendorProductsProductIdImagesQueryOptions = <TData = Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError = AxiosError<GetVendorProductsProductIdImages401 | GetVendorProductsProductIdImages403>>(productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVendorProductsProductIdImagesQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>> = ({ signal }) => getVendorProductsProductIdImages(productId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVendorProductsProductIdImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>>
export type GetVendorProductsProductIdImagesQueryError = AxiosError<GetVendorProductsProductIdImages401 | GetVendorProductsProductIdImages403>


export function useGetVendorProductsProductIdImages<TData = Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError = AxiosError<GetVendorProductsProductIdImages401 | GetVendorProductsProductIdImages403>>(
 productId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProductsProductIdImages>>,
          TError,
          Awaited<ReturnType<typeof getVendorProductsProductIdImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProductsProductIdImages<TData = Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError = AxiosError<GetVendorProductsProductIdImages401 | GetVendorProductsProductIdImages403>>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVendorProductsProductIdImages>>,
          TError,
          Awaited<ReturnType<typeof getVendorProductsProductIdImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVendorProductsProductIdImages<TData = Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError = AxiosError<GetVendorProductsProductIdImages401 | GetVendorProductsProductIdImages403>>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVendorProductsProductIdImages<TData = Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError = AxiosError<GetVendorProductsProductIdImages401 | GetVendorProductsProductIdImages403>>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVendorProductsProductIdImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVendorProductsProductIdImagesQueryOptions(productId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putVendorProductsProductIdImagesImageId = (
    productId: string,
    imageId: string,
    putVendorProductsProductIdImagesImageIdBody: PutVendorProductsProductIdImagesImageIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutVendorProductsProductIdImagesImageId200>> => {
    
    
    return axios.put(
      `/vendor/products/${productId}/images/${imageId}`,
      putVendorProductsProductIdImagesImageIdBody,options
    );
  }



export const getPutVendorProductsProductIdImagesImageIdMutationOptions = <TError = AxiosError<PutVendorProductsProductIdImagesImageId401 | PutVendorProductsProductIdImagesImageId403 | PutVendorProductsProductIdImagesImageId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorProductsProductIdImagesImageId>>, TError,{productId: string;imageId: string;data: PutVendorProductsProductIdImagesImageIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putVendorProductsProductIdImagesImageId>>, TError,{productId: string;imageId: string;data: PutVendorProductsProductIdImagesImageIdBody}, TContext> => {

const mutationKey = ['putVendorProductsProductIdImagesImageId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVendorProductsProductIdImagesImageId>>, {productId: string;imageId: string;data: PutVendorProductsProductIdImagesImageIdBody}> = (props) => {
          const {productId,imageId,data} = props ?? {};

          return  putVendorProductsProductIdImagesImageId(productId,imageId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVendorProductsProductIdImagesImageIdMutationResult = NonNullable<Awaited<ReturnType<typeof putVendorProductsProductIdImagesImageId>>>
    export type PutVendorProductsProductIdImagesImageIdMutationBody = PutVendorProductsProductIdImagesImageIdBody
    export type PutVendorProductsProductIdImagesImageIdMutationError = AxiosError<PutVendorProductsProductIdImagesImageId401 | PutVendorProductsProductIdImagesImageId403 | PutVendorProductsProductIdImagesImageId404>

    export const usePutVendorProductsProductIdImagesImageId = <TError = AxiosError<PutVendorProductsProductIdImagesImageId401 | PutVendorProductsProductIdImagesImageId403 | PutVendorProductsProductIdImagesImageId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorProductsProductIdImagesImageId>>, TError,{productId: string;imageId: string;data: PutVendorProductsProductIdImagesImageIdBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putVendorProductsProductIdImagesImageId>>,
        TError,
        {productId: string;imageId: string;data: PutVendorProductsProductIdImagesImageIdBody},
        TContext
      > => {

      const mutationOptions = getPutVendorProductsProductIdImagesImageIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteVendorProductsProductIdImagesImageId = (
    productId: string,
    imageId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/vendor/products/${productId}/images/${imageId}`,options
    );
  }



export const getDeleteVendorProductsProductIdImagesImageIdMutationOptions = <TError = AxiosError<DeleteVendorProductsProductIdImagesImageId401 | DeleteVendorProductsProductIdImagesImageId403 | DeleteVendorProductsProductIdImagesImageId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVendorProductsProductIdImagesImageId>>, TError,{productId: string;imageId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVendorProductsProductIdImagesImageId>>, TError,{productId: string;imageId: string}, TContext> => {

const mutationKey = ['deleteVendorProductsProductIdImagesImageId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVendorProductsProductIdImagesImageId>>, {productId: string;imageId: string}> = (props) => {
          const {productId,imageId} = props ?? {};

          return  deleteVendorProductsProductIdImagesImageId(productId,imageId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVendorProductsProductIdImagesImageIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVendorProductsProductIdImagesImageId>>>
    
    export type DeleteVendorProductsProductIdImagesImageIdMutationError = AxiosError<DeleteVendorProductsProductIdImagesImageId401 | DeleteVendorProductsProductIdImagesImageId403 | DeleteVendorProductsProductIdImagesImageId404>

    export const useDeleteVendorProductsProductIdImagesImageId = <TError = AxiosError<DeleteVendorProductsProductIdImagesImageId401 | DeleteVendorProductsProductIdImagesImageId403 | DeleteVendorProductsProductIdImagesImageId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVendorProductsProductIdImagesImageId>>, TError,{productId: string;imageId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteVendorProductsProductIdImagesImageId>>,
        TError,
        {productId: string;imageId: string},
        TContext
      > => {

      const mutationOptions = getDeleteVendorProductsProductIdImagesImageIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putVendorProductsProductIdImagesReorder = (
    productId: string,
    putVendorProductsProductIdImagesReorderBody: PutVendorProductsProductIdImagesReorderBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutVendorProductsProductIdImagesReorder200>> => {
    
    
    return axios.put(
      `/vendor/products/${productId}/images/reorder`,
      putVendorProductsProductIdImagesReorderBody,options
    );
  }



export const getPutVendorProductsProductIdImagesReorderMutationOptions = <TError = AxiosError<PutVendorProductsProductIdImagesReorder400 | PutVendorProductsProductIdImagesReorder401 | PutVendorProductsProductIdImagesReorder403 | PutVendorProductsProductIdImagesReorder404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorProductsProductIdImagesReorder>>, TError,{productId: string;data: PutVendorProductsProductIdImagesReorderBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putVendorProductsProductIdImagesReorder>>, TError,{productId: string;data: PutVendorProductsProductIdImagesReorderBody}, TContext> => {

const mutationKey = ['putVendorProductsProductIdImagesReorder'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putVendorProductsProductIdImagesReorder>>, {productId: string;data: PutVendorProductsProductIdImagesReorderBody}> = (props) => {
          const {productId,data} = props ?? {};

          return  putVendorProductsProductIdImagesReorder(productId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutVendorProductsProductIdImagesReorderMutationResult = NonNullable<Awaited<ReturnType<typeof putVendorProductsProductIdImagesReorder>>>
    export type PutVendorProductsProductIdImagesReorderMutationBody = PutVendorProductsProductIdImagesReorderBody
    export type PutVendorProductsProductIdImagesReorderMutationError = AxiosError<PutVendorProductsProductIdImagesReorder400 | PutVendorProductsProductIdImagesReorder401 | PutVendorProductsProductIdImagesReorder403 | PutVendorProductsProductIdImagesReorder404>

    export const usePutVendorProductsProductIdImagesReorder = <TError = AxiosError<PutVendorProductsProductIdImagesReorder400 | PutVendorProductsProductIdImagesReorder401 | PutVendorProductsProductIdImagesReorder403 | PutVendorProductsProductIdImagesReorder404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putVendorProductsProductIdImagesReorder>>, TError,{productId: string;data: PutVendorProductsProductIdImagesReorderBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putVendorProductsProductIdImagesReorder>>,
        TError,
        {productId: string;data: PutVendorProductsProductIdImagesReorderBody},
        TContext
      > => {

      const mutationOptions = getPutVendorProductsProductIdImagesReorderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    