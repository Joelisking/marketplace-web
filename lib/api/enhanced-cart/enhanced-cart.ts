/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteEnhancedCartItemsProductId200,
  GetEnhancedCart200,
  GetEnhancedCartParams,
  GetEnhancedCartStats200,
  PostEnhancedCartItems200,
  PostEnhancedCartItemsBody,
  PostEnhancedCartSync200,
  PostEnhancedCartSyncBody,
  PutEnhancedCartItemsProductId200,
  PutEnhancedCartItemsProductIdBody
} from '../marketplaceAPI.schemas';





export const getEnhancedCart = (
    params?: GetEnhancedCartParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetEnhancedCart200>> => {
    
    
    return axios.get(
      `http://localhost:4000/enhanced-cart`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetEnhancedCartQueryKey = (params?: GetEnhancedCartParams,) => {
    return [`http://localhost:4000/enhanced-cart`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEnhancedCartQueryOptions = <TData = Awaited<ReturnType<typeof getEnhancedCart>>, TError = AxiosError<unknown>>(params?: GetEnhancedCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCart>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEnhancedCartQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEnhancedCart>>> = ({ signal }) => getEnhancedCart(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEnhancedCartQueryResult = NonNullable<Awaited<ReturnType<typeof getEnhancedCart>>>
export type GetEnhancedCartQueryError = AxiosError<unknown>


export function useGetEnhancedCart<TData = Awaited<ReturnType<typeof getEnhancedCart>>, TError = AxiosError<unknown>>(
 params: undefined |  GetEnhancedCartParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnhancedCart>>,
          TError,
          Awaited<ReturnType<typeof getEnhancedCart>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnhancedCart<TData = Awaited<ReturnType<typeof getEnhancedCart>>, TError = AxiosError<unknown>>(
 params?: GetEnhancedCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnhancedCart>>,
          TError,
          Awaited<ReturnType<typeof getEnhancedCart>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnhancedCart<TData = Awaited<ReturnType<typeof getEnhancedCart>>, TError = AxiosError<unknown>>(
 params?: GetEnhancedCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCart>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetEnhancedCart<TData = Awaited<ReturnType<typeof getEnhancedCart>>, TError = AxiosError<unknown>>(
 params?: GetEnhancedCartParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCart>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEnhancedCartQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postEnhancedCartItems = (
    postEnhancedCartItemsBody: PostEnhancedCartItemsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostEnhancedCartItems200>> => {
    
    
    return axios.post(
      `http://localhost:4000/enhanced-cart/items`,
      postEnhancedCartItemsBody,options
    );
  }



export const getPostEnhancedCartItemsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEnhancedCartItems>>, TError,{data: PostEnhancedCartItemsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postEnhancedCartItems>>, TError,{data: PostEnhancedCartItemsBody}, TContext> => {

const mutationKey = ['postEnhancedCartItems'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEnhancedCartItems>>, {data: PostEnhancedCartItemsBody}> = (props) => {
          const {data} = props ?? {};

          return  postEnhancedCartItems(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEnhancedCartItemsMutationResult = NonNullable<Awaited<ReturnType<typeof postEnhancedCartItems>>>
    export type PostEnhancedCartItemsMutationBody = PostEnhancedCartItemsBody
    export type PostEnhancedCartItemsMutationError = AxiosError<unknown>

    export const usePostEnhancedCartItems = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEnhancedCartItems>>, TError,{data: PostEnhancedCartItemsBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postEnhancedCartItems>>,
        TError,
        {data: PostEnhancedCartItemsBody},
        TContext
      > => {

      const mutationOptions = getPostEnhancedCartItemsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const putEnhancedCartItemsProductId = (
    productId: string,
    putEnhancedCartItemsProductIdBody: PutEnhancedCartItemsProductIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutEnhancedCartItemsProductId200>> => {
    
    
    return axios.put(
      `http://localhost:4000/enhanced-cart/items/${productId}`,
      putEnhancedCartItemsProductIdBody,options
    );
  }



export const getPutEnhancedCartItemsProductIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEnhancedCartItemsProductId>>, TError,{productId: string;data: PutEnhancedCartItemsProductIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putEnhancedCartItemsProductId>>, TError,{productId: string;data: PutEnhancedCartItemsProductIdBody}, TContext> => {

const mutationKey = ['putEnhancedCartItemsProductId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEnhancedCartItemsProductId>>, {productId: string;data: PutEnhancedCartItemsProductIdBody}> = (props) => {
          const {productId,data} = props ?? {};

          return  putEnhancedCartItemsProductId(productId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEnhancedCartItemsProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof putEnhancedCartItemsProductId>>>
    export type PutEnhancedCartItemsProductIdMutationBody = PutEnhancedCartItemsProductIdBody
    export type PutEnhancedCartItemsProductIdMutationError = AxiosError<unknown>

    export const usePutEnhancedCartItemsProductId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEnhancedCartItemsProductId>>, TError,{productId: string;data: PutEnhancedCartItemsProductIdBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putEnhancedCartItemsProductId>>,
        TError,
        {productId: string;data: PutEnhancedCartItemsProductIdBody},
        TContext
      > => {

      const mutationOptions = getPutEnhancedCartItemsProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteEnhancedCartItemsProductId = (
    productId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteEnhancedCartItemsProductId200>> => {
    
    
    return axios.delete(
      `http://localhost:4000/enhanced-cart/items/${productId}`,options
    );
  }



export const getDeleteEnhancedCartItemsProductIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEnhancedCartItemsProductId>>, TError,{productId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEnhancedCartItemsProductId>>, TError,{productId: string}, TContext> => {

const mutationKey = ['deleteEnhancedCartItemsProductId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEnhancedCartItemsProductId>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  deleteEnhancedCartItemsProductId(productId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEnhancedCartItemsProductIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEnhancedCartItemsProductId>>>
    
    export type DeleteEnhancedCartItemsProductIdMutationError = AxiosError<unknown>

    export const useDeleteEnhancedCartItemsProductId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEnhancedCartItemsProductId>>, TError,{productId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteEnhancedCartItemsProductId>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteEnhancedCartItemsProductIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postEnhancedCartSync = (
    postEnhancedCartSyncBody: PostEnhancedCartSyncBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostEnhancedCartSync200>> => {
    
    
    return axios.post(
      `http://localhost:4000/enhanced-cart/sync`,
      postEnhancedCartSyncBody,options
    );
  }



export const getPostEnhancedCartSyncMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEnhancedCartSync>>, TError,{data: PostEnhancedCartSyncBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postEnhancedCartSync>>, TError,{data: PostEnhancedCartSyncBody}, TContext> => {

const mutationKey = ['postEnhancedCartSync'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEnhancedCartSync>>, {data: PostEnhancedCartSyncBody}> = (props) => {
          const {data} = props ?? {};

          return  postEnhancedCartSync(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEnhancedCartSyncMutationResult = NonNullable<Awaited<ReturnType<typeof postEnhancedCartSync>>>
    export type PostEnhancedCartSyncMutationBody = PostEnhancedCartSyncBody
    export type PostEnhancedCartSyncMutationError = AxiosError<unknown>

    export const usePostEnhancedCartSync = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEnhancedCartSync>>, TError,{data: PostEnhancedCartSyncBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postEnhancedCartSync>>,
        TError,
        {data: PostEnhancedCartSyncBody},
        TContext
      > => {

      const mutationOptions = getPostEnhancedCartSyncMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getEnhancedCartStats = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetEnhancedCartStats200>> => {
    
    
    return axios.get(
      `http://localhost:4000/enhanced-cart/stats`,options
    );
  }


export const getGetEnhancedCartStatsQueryKey = () => {
    return [`http://localhost:4000/enhanced-cart/stats`] as const;
    }

    
export const getGetEnhancedCartStatsQueryOptions = <TData = Awaited<ReturnType<typeof getEnhancedCartStats>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCartStats>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEnhancedCartStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEnhancedCartStats>>> = ({ signal }) => getEnhancedCartStats({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCartStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEnhancedCartStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getEnhancedCartStats>>>
export type GetEnhancedCartStatsQueryError = AxiosError<unknown>


export function useGetEnhancedCartStats<TData = Awaited<ReturnType<typeof getEnhancedCartStats>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCartStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnhancedCartStats>>,
          TError,
          Awaited<ReturnType<typeof getEnhancedCartStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnhancedCartStats<TData = Awaited<ReturnType<typeof getEnhancedCartStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCartStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnhancedCartStats>>,
          TError,
          Awaited<ReturnType<typeof getEnhancedCartStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnhancedCartStats<TData = Awaited<ReturnType<typeof getEnhancedCartStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCartStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetEnhancedCartStats<TData = Awaited<ReturnType<typeof getEnhancedCartStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnhancedCartStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEnhancedCartStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



