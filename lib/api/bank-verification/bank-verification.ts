/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Marketplace API
 * Multi-vendor marketplace API ‚Äî Express, TypeScript, Prisma. Auto-generated from Zod schemas.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetBankVerificationBanks200,
  GetBankVerificationBanksBankCode200,
  GetBankVerificationBanksParams,
  GetBankVerificationBanksSearch200,
  GetBankVerificationBanksSearchParams,
  PostBankVerificationBanksVerify200,
  PostBankVerificationBanksVerifyBody
} from '../marketplaceAPI.schemas';





/**
 * Retrieve a list of all available banks from Paystack
 * @summary Get list of banks
 */
export const getBankVerificationBanks = (
    params?: GetBankVerificationBanksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetBankVerificationBanks200>> => {
    
    
    return axios.get(
      `http://localhost:4000/bank-verification/banks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetBankVerificationBanksQueryKey = (params?: GetBankVerificationBanksParams,) => {
    return [`http://localhost:4000/bank-verification/banks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBankVerificationBanksQueryOptions = <TData = Awaited<ReturnType<typeof getBankVerificationBanks>>, TError = AxiosError<void>>(params?: GetBankVerificationBanksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanks>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBankVerificationBanksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBankVerificationBanks>>> = ({ signal }) => getBankVerificationBanks(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBankVerificationBanksQueryResult = NonNullable<Awaited<ReturnType<typeof getBankVerificationBanks>>>
export type GetBankVerificationBanksQueryError = AxiosError<void>


export function useGetBankVerificationBanks<TData = Awaited<ReturnType<typeof getBankVerificationBanks>>, TError = AxiosError<void>>(
 params: undefined |  GetBankVerificationBanksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBankVerificationBanks>>,
          TError,
          Awaited<ReturnType<typeof getBankVerificationBanks>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBankVerificationBanks<TData = Awaited<ReturnType<typeof getBankVerificationBanks>>, TError = AxiosError<void>>(
 params?: GetBankVerificationBanksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBankVerificationBanks>>,
          TError,
          Awaited<ReturnType<typeof getBankVerificationBanks>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBankVerificationBanks<TData = Awaited<ReturnType<typeof getBankVerificationBanks>>, TError = AxiosError<void>>(
 params?: GetBankVerificationBanksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanks>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get list of banks
 */

export function useGetBankVerificationBanks<TData = Awaited<ReturnType<typeof getBankVerificationBanks>>, TError = AxiosError<void>>(
 params?: GetBankVerificationBanksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanks>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBankVerificationBanksQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Verify a bank account number using Paystack API
 * @summary Verify bank account number
 */
export const postBankVerificationBanksVerify = (
    postBankVerificationBanksVerifyBody: PostBankVerificationBanksVerifyBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostBankVerificationBanksVerify200>> => {
    
    
    return axios.post(
      `http://localhost:4000/bank-verification/banks/verify`,
      postBankVerificationBanksVerifyBody,options
    );
  }



export const getPostBankVerificationBanksVerifyMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBankVerificationBanksVerify>>, TError,{data: PostBankVerificationBanksVerifyBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postBankVerificationBanksVerify>>, TError,{data: PostBankVerificationBanksVerifyBody}, TContext> => {

const mutationKey = ['postBankVerificationBanksVerify'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postBankVerificationBanksVerify>>, {data: PostBankVerificationBanksVerifyBody}> = (props) => {
          const {data} = props ?? {};

          return  postBankVerificationBanksVerify(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostBankVerificationBanksVerifyMutationResult = NonNullable<Awaited<ReturnType<typeof postBankVerificationBanksVerify>>>
    export type PostBankVerificationBanksVerifyMutationBody = PostBankVerificationBanksVerifyBody
    export type PostBankVerificationBanksVerifyMutationError = AxiosError<void>

    /**
 * @summary Verify bank account number
 */
export const usePostBankVerificationBanksVerify = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBankVerificationBanksVerify>>, TError,{data: PostBankVerificationBanksVerifyBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postBankVerificationBanksVerify>>,
        TError,
        {data: PostBankVerificationBanksVerifyBody},
        TContext
      > => {

      const mutationOptions = getPostBankVerificationBanksVerifyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieve bank details by bank code
 * @summary Get bank by code
 */
export const getBankVerificationBanksBankCode = (
    bankCode: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetBankVerificationBanksBankCode200>> => {
    
    
    return axios.get(
      `http://localhost:4000/bank-verification/banks/${bankCode}`,options
    );
  }


export const getGetBankVerificationBanksBankCodeQueryKey = (bankCode: string,) => {
    return [`http://localhost:4000/bank-verification/banks/${bankCode}`] as const;
    }

    
export const getGetBankVerificationBanksBankCodeQueryOptions = <TData = Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError = AxiosError<void>>(bankCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBankVerificationBanksBankCodeQueryKey(bankCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>> = ({ signal }) => getBankVerificationBanksBankCode(bankCode, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(bankCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBankVerificationBanksBankCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>>
export type GetBankVerificationBanksBankCodeQueryError = AxiosError<void>


export function useGetBankVerificationBanksBankCode<TData = Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError = AxiosError<void>>(
 bankCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>,
          TError,
          Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBankVerificationBanksBankCode<TData = Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError = AxiosError<void>>(
 bankCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>,
          TError,
          Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBankVerificationBanksBankCode<TData = Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError = AxiosError<void>>(
 bankCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get bank by code
 */

export function useGetBankVerificationBanksBankCode<TData = Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError = AxiosError<void>>(
 bankCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksBankCode>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBankVerificationBanksBankCodeQueryOptions(bankCode,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Search banks by name or code
 * @summary Search banks
 */
export const getBankVerificationBanksSearch = (
    params: GetBankVerificationBanksSearchParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetBankVerificationBanksSearch200>> => {
    
    
    return axios.get(
      `http://localhost:4000/bank-verification/banks/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetBankVerificationBanksSearchQueryKey = (params: GetBankVerificationBanksSearchParams,) => {
    return [`http://localhost:4000/bank-verification/banks/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBankVerificationBanksSearchQueryOptions = <TData = Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError = AxiosError<void>>(params: GetBankVerificationBanksSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBankVerificationBanksSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>> = ({ signal }) => getBankVerificationBanksSearch(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBankVerificationBanksSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>>
export type GetBankVerificationBanksSearchQueryError = AxiosError<void>


export function useGetBankVerificationBanksSearch<TData = Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError = AxiosError<void>>(
 params: GetBankVerificationBanksSearchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBankVerificationBanksSearch>>,
          TError,
          Awaited<ReturnType<typeof getBankVerificationBanksSearch>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBankVerificationBanksSearch<TData = Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError = AxiosError<void>>(
 params: GetBankVerificationBanksSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBankVerificationBanksSearch>>,
          TError,
          Awaited<ReturnType<typeof getBankVerificationBanksSearch>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBankVerificationBanksSearch<TData = Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError = AxiosError<void>>(
 params: GetBankVerificationBanksSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search banks
 */

export function useGetBankVerificationBanksSearch<TData = Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError = AxiosError<void>>(
 params: GetBankVerificationBanksSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBankVerificationBanksSearch>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBankVerificationBanksSearchQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



